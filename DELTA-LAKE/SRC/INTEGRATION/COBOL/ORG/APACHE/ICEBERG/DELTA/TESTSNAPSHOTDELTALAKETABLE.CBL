IDENTIFICATION DIVISION.
PROGRAM-ID. TestSnapshotDeltaLakeTable.

ENVIRONMENT DIVISION.
SPECIAL-NAMES.
    USING FOR FUNCTION Exp.

DATA DIVISION.
FILE SECTION.
WORKING-STORAGE SECTION.
01 SNAPSHOT-SOURCE-PROP PIC X(18) VALUE "snapshot_source".
01 DELTA-SOURCE-VALUE PIC X(5) VALUE "delta".
01 ORIGINAL-LOCATION-PROP PIC X(18) VALUE "original_location".
01 NAMESPACE PIC X(20) VALUE "delta_conversion_test".
01 DEFAULT-SPARK-CATALOG PIC X(12) VALUE "spark_catalog".
01 ICEBERG-CATALOG-NAME PIC X(14) VALUE "iceberg_hive".
01 CONFIG.
    05 TYPE PIC X(4) VALUE "hive".
    05 DEFAULT-NAMESPACE PIC X(6) VALUE "default".
    05 PARQUET-ENABLED PIC X(8) VALUE "true".
    05 CACHE-ENABLED PIC X(8) VALUE "false".
01 TYPE-TEST-DATA-FRAME PIC X(20) VALUE "type_test_dataframe".
01 NESTED-DATA-FRAME PIC X(15) VALUE "nested_dataframe".
01 TEMP-A PIC X(8) VALUE "tempfile".
01 TEMP-B PIC X(8) VALUE "tempfile".
01 PARTITIONED-IDENTIFIER PIC X(26) VALUE "partitioned_table".
01 PARTITIONED-LOCATION PIC X(30) VALUE "partitioned_table_location".
01 NEW-TABLE-IDENTIFIER PIC X(30) VALUE "iceberg_partitioned_table".
01 UNPARTITIONED-IDENTIFIER PIC X(26) VALUE "unpartitioned_table".
01 UNPARTITIONED-LOCATION PIC X(30) VALUE "unpartitioned_table_location".
01 NEW-UNPARTITIONED-IDENTIFIER PIC X(30) VALUE "iceberg_unpartitioned_table".
01 NEW-ICEBERG-TABLE-LOCATION PIC X(30) VALUE "new_iceberg_table_location".
01 NEW-ADDITIONAL-PROPERTIES-IDENTIFIER PIC X(35) VALUE "iceberg_additional_properties_table".
01 EXTERNAL-DATA-FILES-IDENTIFIER PIC X(29) VALUE "external_data_files_table".
01 EXTERNAL-DATA-FILES-LOCATION PIC X(35) VALUE "external_data_files_table_location".
01 NEW-EXTERNAL-DATA-FILES-IDENTIFIER PIC X(35) VALUE "iceberg_external_data_files_table".
01 TYPE-TEST-IDENTIFIER PIC X(22) VALUE "type_test_table".
01 TYPE-TEST-LOCATION PIC X(22) VALUE "type_test_table_location".
01 NEW-TYPE-TEST-IDENTIFIER PIC X(24) VALUE "iceberg_type_test_table".
01 VACUUM-TEST-IDENTIFIER PIC X(19) VALUE "vacuum_test_table".
01 VACUUM-TEST-LOCATION PIC X(19) VALUE "vacuum_test_table_location". 
01 NEW-VACUUM-IDENTIFIER PIC X(20) VALUE "iceberg_vacuum_table".
01 LOG-CLEAN-TEST-IDENTIFIER PIC X(20) VALUE "log_clean_test_table".
01 LOG-CLEAN-TEST-LOCATION PIC X(20) VALUE "log_clean_test_location".
01 NEW-LOG-CLEAN-IDENTIFIER PIC X(19) VALUE "iceberg_log_clean_table".

PROCEDURE DIVISION.

*> Execute tests
CALL "testBasicSnapshotPartitioned".
CALL "testBasicSnapshotUnpartitioned".
CALL "testSnapshotWithNewLocation".
CALL "testSnapshotWithAdditionalProperties".
CALL "testSnapshotTableWithExternalDataFiles".
CALL "testSnapshotSupportedTypes".
CALL "testSnapshotVacuumTable".
CALL "testSnapshotLogCleanTable".

*> Utility procedures
CALL "writeDeltaTable" USING TYPE-TEST-DATA-FRAME, TYPE-TEST-IDENTIFIER, TYPE-TEST-LOCATION, "stringCol", "timestampStrCol", "booleanCol", "longCol".
CALL "writeDeltaTable" USING NESTED-DATA-FRAME, PARTITIONED-IDENTIFIER, PARTITIONED-LOCATION, "id".
CALL "writeDeltaTable" USING NESTED-DATA-FRAME, UNPARTITIONED-IDENTIFIER, UNPARTITIONED-LOCATION.
CALL "writeDeltaTable" USING NESTED-DATA-FRAME, EXTERNAL-DATA-FILES-IDENTIFIER, EXTERNAL-DATA-FILES-LOCATION, "id".
CALL "addExternalDatafiles" USING EXTERNAL-DATA-FILES-LOCATION, UNPARTITIONED-LOCATION.
CALL "countDataFilesInDeltaLakeTable" USING VACUUM-TEST-LOCATION, 0 RETURNING DATA-FILES-COUNT.
CALL "getIcebergTable" USING NEW-TYPE-TEST-IDENTIFIER RETURNING ICEBERG-TABLE.
CALL "getIcebergTable" USING NEW-VACUUM-IDENTIFIER RETURNING ICEBERG-TABLE.
CALL "getIcebergTable" USING NEW-LOG-CLEAN-IDENTIFIER RETURNING ICEBERG-TABLE.

STOP RUN.

PROGRAM-ID. writeDeltaTable.
PROCEDURE DIVISION USING DATA-FRAME, IDENTIFIER, LOCATION, PARTITION-COLUMNS.
    PERFORM DROP-TABLE-IF-EXISTS USING IDENTIFIER.
    IF PARTITION-COLUMNS NOT EQUAL SPACES
        WRITE DATA-FRAME
            FORMAT "delta"
            MODE "Append"
            OPTION "path" USING LOCATION
            PARTITION BY PARTITION-COLUMNS
            SAVE AS TABLE IDENTIFIER
    ELSE
        WRITE DATA-FRAME
            FORMAT "delta" 
            MODE "Append"
            OPTION "path" USING LOCATION
            SAVE AS TABLE IDENTIFIER
    END-IF.
    EXIT PROGRAM.

PROGRAM-ID. addExternalDatafiles.
PROCEDURE DIVISION USING TARGET-LOCATION, SOURCE-LOCATION.
    CALL "getDeltaLog" USING TARGET-LOCATION RETURNING TARGET-LOG.
    CALL "startTransaction" USING TARGET-LOG RETURNING TRANSACTION.
    CALL "getDeltaLog" USING SOURCE-LOCATION RETURNING SOURCE-LOG.
    CALL "getAllFiles" USING SOURCE-LOG RETURNING SOURCE-FILES.
    PERFORM VARYING SOURCE-FILE FROM 1 BY 1 UNTIL SOURCE-FILE > SOURCE-FILES-COUNT
        COMPUTE FILE-PATH = GETFULLFILEPATH(SOURCE-FILES(SOURCE-FILE), SOURCE-LOG)
        CALL "addFile" USING FILE-PATH, SOURCE-FILES(SOURCE-FILE)-PARTITION-VALUES, SOURCE-FILES(SOURCE-FILE)-SIZE, CURRENT-DATE, TRUE RETURNING NEW-FILE
        COLLECT NEW-FILE INTO NEW-FILES
    END-PERFORM.
    CALL "commit" USING TRANSACTION, NEW-FILES, "Delta-Lake/2.2.0" EXCEPTION DeltaConcurrentModificationException.
    EXIT PROGRAM.

PROGRAM-ID. countDataFilesInDeltaLakeTable.
PROCEDURE DIVISION USING DELTA-LOCATION, FIRST-CONSTRUCTABLE-VERSION RETURNING DATA-FILES-COUNT.
    CALL "getDeltaLog" USING DELTA-LOCATION RETURNING DELTA-LOG.
    MOVE 0 TO DATA-FILES-COUNT.
    CALL "getSnapshotForVersionAsOf" USING DELTA-LOG, FIRST-CONSTRUCTABLE-VERSION RETURNING INITIAL-DATA-FILES.
    MOVE LENGTH OF INITIAL-DATA-FILES TO DATA-FILES-COUNT.
    CALL "getChanges" USING DELTA-LOG, FIRST-CONSTRUCTABLE-VERSION + 1, FALSE RETURNING VERSION-LOG-ITERATOR.
    PERFORM UNTIL VERSION-LOG-ITERATOR IS EMPTY
        CALL "getActions" USING VERSION-LOG-ITERATOR RETURNING VERSION-LOG-ACTIONS
        PERFORM VARYING ACTION FROM 1 BY 1 UNTIL ACTION > LENGTH OF VERSION-LOG-ACTIONS
            IF VERSION-LOG-ACTIONS(ACTION) IS AddFile
                ADD 1 TO DATA-FILES-COUNT
            END-IF
        END-PERFORM
    END-PERFORM.
    EXIT PROGRAM.

PROGRAM-ID. getIcebergTable.
PROCEDURE DIVISION USING IDENTIFIER RETURNING ICEBERG-TABLE.
    CALL "getCurrentCatalog" USING SPARK-STATE RETURNING DEFAULT-CATALOG.
    CALL "catalogAndIdentifier" USING "test catalog", SPARK, IDENTIFIER, DEFAULT-CATALOG RETURNING CATALOG-AND-IDENT.
    CALL "loadIcebergCatalog" USING SPARK, CATALOG-AND-IDENT-CATALOG-NAME RETURNING ICEBERG-CATALOG.
    CALL "loadTable" USING ICEBERG-CATALOG, CATALOG-AND-IDENT-IDENTIFIER RETURNING ICEBERG-TABLE.
    EXIT PROGRAM.

PROGRAM-ID. DROP-TABLE-IF-EXISTS.
PROCEDURE DIVISION USING IDENTIFIER.
    EXEC SQL
        DROP TABLE IF EXISTS IDENTIFIER
    END-EXEC.
    EXIT PROGRAM.

PROGRAM-ID. getDeltaLog.
PROCEDURE DIVISION USING LOCATION RETURNING DELTA-LOG.
    CALL "forTable" USING SPARK-STATE-HADOOP-CONF, LOCATION RETURNING DELTA-LOG.
    EXIT PROGRAM.

PROGRAM-ID. startTransaction.
PROCEDURE DIVISION USING DELTA-LOG RETURNING TRANSACTION.
    CALL "startTransaction" USING DELTA-LOG RETURNING TRANSACTION.
    EXIT PROGRAM.

PROGRAM-ID. getAllFiles.
PROCEDURE DIVISION USING DELTA-LOG RETURNING ALL-FILES.
    CALL "getAllFiles" USING DELTA-LOG RETURNING ALL-FILES.
    EXIT PROGRAM.

PROGRAM-ID. getFullFilePath.
PROCEDURE DIVISION USING PATH, TABLE-ROOT RETURNING FULL-PATH.
    CALL "createURI" USING PATH RETURNING DATA-FILE-URI.
    CALL "decode" USING PATH RETURNING DECODED-PATH.
    IF DATA-FILE-URI IS ABSOLUTE
        MOVE DECODED-PATH TO FULL-PATH
    ELSE
        STRING TABLE-ROOT DELIMITED BY SIZE, FILE-SEPARATOR, DECODED-PATH DELIMITED BY SIZE INTO FULL-PATH
    END-IF.
    EXIT PROGRAM.

PROGRAM-ID. addFile.
PROCEDURE DIVISION USING FILE-PATH, PARTITION-VALUES, FILE-SIZE, TIMESTAMP, IS-ADDITION RETURNING NEW-FILE.
    CALL "builder" USING FILE-PATH, PARTITION-VALUES, FILE-SIZE, TIMESTAMP, IS-ADDITION RETURNING NEW-FILE-BUILDER.
    CALL "build" USING NEW-FILE-BUILDER RETURNING NEW-FILE.
    EXIT PROGRAM.

PROGRAM-ID. commit.
PROCEDURE DIVISION USING TRANSACTION, NEW-FILES, OPERATION-NAME EXCEPTION DeltaConcurrentModificationException.
    CALL "commit" USING TRANSACTION, NEW-FILES, OPERATION-NAME.
    EXIT PROGRAM.

PROGRAM-ID. getSnapshotForVersionAsOf.
PROCEDURE DIVISION USING DELTA-LOG, VERSION RETURNING SNAPSHOT.
    CALL "getSnapshotForVersionAsOf" USING DELTA-LOG, VERSION RETURNING SNAPSHOT.
    EXIT PROGRAM.

PROGRAM-ID. getChanges.
PROCEDURE DIVISION USING DELTA-LOG, START-VERSION, THROW-EXCEPTION RETURNING VERSION-LOG-ITERATOR.
    CALL "getChanges" USING DELTA-LOG, START-VERSION, THROW-EXCEPTION RETURNING VERSION-LOG-ITERATOR.
    EXIT PROGRAM.

PROGRAM-ID. getActions.
PROCEDURE DIVISION USING VERSION-LOG RETURNING ACTIONS.
    CALL "getActions" USING VERSION-LOG RETURNING ACTIONS.
    EXIT PROGRAM.

PROGRAM-ID. createURI.
PROCEDURE DIVISION USING PATH RETURNING URI.
    CALL "createURI" USING PATH RETURNING URI.
    EXIT PROGRAM.

PROGRAM-ID. decode.
PROCEDURE DIVISION USING PATH RETURNING DECODED-PATH.
    CALL "decode" USING PATH RETURNING DECODED-PATH.
    EXIT PROGRAM.

PROGRAM-ID. builder.
PROCEDURE DIVISION USING FILE-PATH, PARTITION-VALUES, FILE-SIZE, TIMESTAMP, IS-ADDITION RETURNING BUILDER.
    CALL "builder" USING FILE-PATH, PARTITION-VALUES, FILE-SIZE, TIMESTAMP, IS-ADDITION RETURNING BUILDER.
    EXIT PROGRAM.

PROGRAM-ID. build.
PROCEDURE DIVISION USING BUILDER RETURNING FILE.
    CALL "build" USING BUILDER RETURNING FILE.
    EXIT PROGRAM.