IDENTIFICATION DIVISION.
PROGRAM-ID. PARTITIONING.

ENVIRONMENT DIVISION.
REPOSITORY.
    COPY TRANSFORMS.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-BUCKET-COLUMN PIC X(256) VALUE SPACES.
01 WS-HIGHEST-NUM-BUCKETS PIC 9(9) VALUE 0.
01 WS-UNKNOWN-TRANSFORMS PIC X(256) VALUE SPACES.

PROCEDURE DIVISION.

IDENTIFICATION-SECTION.
    ENTRY 'HAS-BUCKET-FIELD'.
        CALL 'PARTITION-SPEC-VISITOR' USING SPEC, 
                                        IDENTIFICATION-VISITOR,
                                        WS-BUCKET-COLUMN,
                                        WS-HIGHEST-NUM-BUCKETS.
        IF WS-BUCKET-COLUMN NOT = SPACES
            RETURN TRUE
        ELSE
            RETURN FALSE.

    ENTRY 'SORT-ORDER-FOR'.
        IF SPEC IS UNPARTITIONED
            RETURN SortOrder.unsorted().

        CALL 'SORT-ORDER-BUILDER' USING SPEC-SCHEMA, BUILDER.
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF SPEC-FIELDS
            EVALUATE SPEC-FIELDS(I)
                WHEN 'IDENTITY'
                    CALL 'BUILDER-ASC' USING SPEC-FIELD-NAME(I)
                WHEN 'BUCKET'
                    IF SPEC-FIELD-NUM-BUCKETS(I) > WS-HIGHEST-NUM-BUCKETS
                        MOVE SPEC-FIELD-NAME(I) TO WS-BUCKET-COLUMN
                        MOVE SPEC-FIELD-NUM-BUCKETS(I) TO WS-HIGHEST-NUM-BUCKETS
                    CALL 'BUILDER-ASC' USING 'BUCKET' SPEC-FIELD-NAME(I) SPEC-FIELD-NUM-BUCKETS(I)
                WHEN 'TRUNCATE'
                    CALL 'BUILDER-ASC' USING 'TRUNCATE' SPEC-FIELD-NAME(I) SPEC-FIELD-NUM-BUCKETS(I)
                WHEN 'YEAR'
                    CALL 'BUILDER-ASC' USING 'YEAR' SPEC-FIELD-NAME(I)
                WHEN 'MONTH'
                    CALL 'BUILDER-ASC' USING 'MONTH' SPEC-FIELD-NAME(I)
                WHEN 'DAY'
                    CALL 'BUILDER-ASC' USING 'DAY' SPEC-FIELD-NAME(I)
                WHEN 'HOUR'
                    CALL 'BUILDER-ASC' USING 'HOUR' SPEC-FIELD-NAME(I)
                WHEN 'ALWAYS-NULL'
                    CONTINUE
                WHEN OTHER
                    MOVE SPEC-FIELD-TRANSFORM(I) TO WS-UNKNOWN-TRANSFORMS
            END-EVALUATE
        END-PERFORM.

        IF WS-BUCKET-COLUMN NOT = SPACES
            CALL 'BUILDER-ASC' USING WS-BUCKET-COLUMN.

        RETURN BUILDER.build().

    ENTRY 'GROUPING-KEY-TYPE'.
        CALL 'PARTITION-PROJECTION-TYPE' USING SCHEMA, SPECS, 'grouping key', 
                                         COMMON-ACTIVE-FIELD-IDS.
        RETURN PARTITION-TYPE.

    ENTRY 'PARTITION-TYPE'.
        CALL 'PARTITION-PROJECTION-TYPE' USING NULL, TABLE-SPECS, 'table partition', 
                                         ALL-FIELD-IDS.
        RETURN PARTITION-TYPE.

    ENTRY 'IS-PARTITIONED'.
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF TABLE-SPECS
            IF TABLE-SPECS(I) IS PARTITIONED
                RETURN TRUE
        END-PERFORM.
        RETURN FALSE.

IDENTIFICATION-VISITOR.
    PROCEDURE DIVISION USING FIELD-ID, SOURCE-NAME, SOURCE-ID.
        EVALUATE TRANSFORM-TYPE
            WHEN 'IDENTITY'
                MOVE FALSE TO RETURN-VALUE
            WHEN 'BUCKET'
                MOVE TRUE TO RETURN-VALUE
            WHEN 'TRUNCATE'
                MOVE FALSE TO RETURN-VALUE
            WHEN 'YEAR'
                MOVE FALSE TO RETURN-VALUE
            WHEN 'MONTH'
                MOVE FALSE TO RETURN-VALUE
            WHEN 'DAY'
                MOVE FALSE TO RETURN-VALUE
            WHEN 'HOUR'
                MOVE FALSE TO RETURN-VALUE
            WHEN 'ALWAYS-NULL'
                MOVE FALSE TO RETURN-VALUE
            WHEN OTHER
                MOVE TRANSFORM-TYPE TO WS-UNKNOWN-TRANSFORMS
                MOVE FALSE TO RETURN-VALUE
        END-EVALUATE.

PARTITION-PROJECTION-TYPE.
    PROCEDURE DIVISION USING SCHEMA, SPECS, TYPE-NAME, PROJECTED-FIELD-IDS.
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF UNKNOWN-TRANSFORMS
            IF UNKNOWN-TRANSFORMS(I) NOT = SPACES
                MOVE UNKNOWN-TRANSFORMS(I) TO WS-UNKNOWN-TRANSFORMS
                SIGNAL VALIDATION-EXCEPTION 
                    "Cannot build %s type, unknown transforms: %s" TYPE-NAME WS-UNKNOWN-TRANSFORMS
        END-PERFORM.

        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF SPECS
            PERFORM VARYING J FROM 1 BY 1 UNTIL J > LENGTH OF SPEC-FIELDS(I)
                IF PROJECTED-FIELD-IDS CONTAINS SPEC-FIELD-ID(I,J)
                    IF FIELD-MAP(SPEC-FIELD-ID(I,J)) IS NULL
                        MOVE SPEC-FIELD(I,J) TO FIELD-MAP(SPEC-FIELD-ID(I,J))
                        MOVE SPEC-FIELD-TYPE(I,J) TO TYPE-MAP(SPEC-FIELD-ID(I,J))
                        MOVE SPEC-FIELD-NAME(I,J) TO NAME-MAP(SPEC-FIELD-ID(I,J))
                    ELSE
                        IF NOT EQUIVALENT-IGNORING-NAMES(SPEC-FIELD(I,J), FIELD-MAP(SPEC-FIELD-ID(I,J)))
                            SIGNAL VALIDATION-EXCEPTION
                                "Conflicting partition fields: ['%s', '%s']" SPEC-FIELD(I,J) FIELD-MAP(SPEC-FIELD-ID(I,J))
                        IF IS-VOID-TRANSFORM(FIELD-MAP(SPEC-FIELD-ID(I,J))) 
                            AND NOT IS-VOID-TRANSFORM(SPEC-FIELD(I,J))
                            MOVE SPEC-FIELD(I,J) TO FIELD-MAP(SPEC-FIELD-ID(I,J))
                            MOVE SPEC-FIELD-TYPE(I,J) TO TYPE-MAP(SPEC-FIELD-ID(I,J))
                        END-IF
                    END-IF
                END-IF
            END-PERFORM
        END-PERFORM.

        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF SORTED-FIELD-IDS
            MOVE NAME-MAP(SORTED-FIELD-IDS(I)) TO FIELD-NAME
            MOVE TYPE-MAP(SORTED-FIELD-IDS(I)) TO FIELD-TYPE
            CALL 'CREATE-NESTED-FIELD' USING SORTED-FIELD-IDS(I), FIELD-NAME, FIELD-TYPE, PARTITION-TYPE
        END-PERFORM.

        RETURN PARTITION-TYPE.

COMMON-ACTIVE-FIELD-IDS.
    PROCEDURE DIVISION USING SCHEMA, SPECS.
        MOVE ALL FIELD-IDS TO COMMON-FIELD-IDS.
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF SPECS
            PERFORM VARYING J FROM 1 BY 1 UNTIL J > LENGTH OF SPEC-FIELDS(I)
                IF SCHEMA IS NULL OR SCHEMA-FIELD(SPEC-FIELD-ID(I,J)) IS NOT NULL
                    IF NOT IS-VOID-TRANSFORM(SPEC-FIELD(I,J))
                        MOVE SPEC-FIELD-ID(I,J) TO ACTIVE-FIELD-IDS(I)
                    END-IF
                END-IF
            END-PERFORM
            IF I = 1
                MOVE ACTIVE-FIELD-IDS(I) TO COMMON-FIELD-IDS
            ELSE
                INTERSECT COMMON-FIELD-IDS ACTIVE-FIELD-IDS(I)
            END-IF
        END-PERFORM.
        RETURN COMMON-FIELD-IDS.

ALL-FIELD-IDS.
    PROCEDURE DIVISION USING SPECS.
        MOVE ALL FIELD-IDS TO ALL-IDS.
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF SPECS
            PERFORM VARYING J FROM 1 BY 1 UNTIL J > LENGTH OF SPEC-FIELDS(I)
                MOVE SPEC-FIELD-ID(I,J) TO ALL-IDS
            END-PERFORM
        END-PERFORM.
        RETURN ALL-IDS.

ACTIVE-FIELD-IDS.
    PROCEDURE DIVISION USING SCHEMA, SPEC.
        MOVE ALL FIELD-IDS TO ACTIVE-IDS.
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF SPEC-FIELDS
            IF SCHEMA IS NULL OR SCHEMA-FIELD(SPEC-FIELD-ID(I)) IS NOT NULL
                IF NOT IS-VOID-TRANSFORM(SPEC-FIELD(I))
                    MOVE SPEC-FIELD-ID(I) TO ACTIVE-IDS
                END-IF
            END-IF
        END-PERFORM.
        RETURN ACTIVE-IDS.

IS-VOID-TRANSFORM.
    PROCEDURE DIVISION USING FIELD.
        IF FIELD-TRANSFORM = 'ALWAYS-NULL'
            RETURN TRUE
        ELSE
            RETURN FALSE.

EQUIVALENT-IGNORING-NAMES.
    PROCEDURE DIVISION USING FIELD1, FIELD2.
        IF FIELD1-ID = FIELD2-ID
            AND FIELD1-SOURCE-ID = FIELD2-SOURCE-ID
            AND COMPATIBLE-TRANSFORMS(FIELD1-TRANSFORM, FIELD2-TRANSFORM)
            RETURN TRUE
        ELSE
            RETURN FALSE.

COMPATIBLE-TRANSFORMS.
    PROCEDURE DIVISION USING TRANSFORM1, TRANSFORM2.
        IF TRANSFORM1 = TRANSFORM2
            OR TRANSFORM1 = 'ALWAYS-NULL'
            OR TRANSFORM2 = 'ALWAYS-NULL'
            RETURN TRUE
        ELSE
            RETURN FALSE.

END PROGRAM PARTITIONING.