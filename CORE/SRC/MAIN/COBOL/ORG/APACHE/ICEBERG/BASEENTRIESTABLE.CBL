IDENTIFICATION DIVISION.
PROGRAM-ID. BASE-ENTRIES-TABLE.

ENVIRONMENT DIVISION.
REPOSITORY.
    COPY "ICEBERG-EXPRESSIONS.cpy".
    COPY "ICEBERG-MANIFEST-EVALUATOR.cpy".
    COPY "ICEBERG-METRICS-UTIL.cpy".
    COPY "ICEBERG-PARTITION-SPEC.cpy".
    COPY "ICEBERG-SCHEMA.cpy".
    COPY "ICEBERG-STRUCT-PROJECTION.cpy".
    COPY "ICEBERG-TABLE-SCAN-CONTEXT.cpy".

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-FILTER-CACHE.
    05 WS-FILTER-CACHE-ENTRIES.
        10 WS-FILTER-CACHE-ENTRY OCCURS 100 TIMES
           INDEXED BY WS-FILTER-CACHE-INDEX.
           15 WS-FILTER-CACHE-SPEC-ID PIC 9(9) COMP.
           15 WS-FILTER-CACHE-EVALUATOR PIC X(1000).

PROCEDURE DIVISION.

    METHOD-ID. PLAN-FILES.
    LINKAGE SECTION.
    01 LS-TABLE PIC X(50).
    01 LS-MANIFESTS PIC X(1000).
    01 LS-TABLE-SCHEMA PIC X(1000).
    01 LS-PROJECTED-SCHEMA PIC X(1000).
    01 LS-CONTEXT PIC X(1000).
    PROCEDURE DIVISION USING LS-TABLE, LS-MANIFESTS, LS-TABLE-SCHEMA, LS-PROJECTED-SCHEMA, LS-CONTEXT.
        PERFORM VARYING WS-FILTER-CACHE-INDEX FROM 1 BY 1 UNTIL WS-FILTER-CACHE-INDEX > 100
            EVALUATE TRUE
                WHEN WS-FILTER-CACHE-SPEC-ID(WS-FILTER-CACHE-INDEX) = MANIFEST-SPEC-ID
                    MOVE WS-FILTER-CACHE-EVALUATOR(WS-FILTER-CACHE-INDEX) TO MANIFEST-EVALUATOR
                WHEN OTHER
                    MOVE FUNCTION ORD('0') TO WS-FILTER-CACHE-SPEC-ID(WS-FILTER-CACHE-INDEX)
            END-EVALUATE
        END-PERFORM.
        PERFORM MANIFEST-CONTENT-EVALUATOR-INIT USING LS-TABLE-SCHEMA, LS-CONTEXT.
        PERFORM VARYING WS-FILTER-CACHE-INDEX FROM 1 BY 1 UNTIL WS-FILTER-CACHE-INDEX > 100
            IF WS-FILTER-CACHE-SPEC-ID(WS-FILTER-CACHE-INDEX) = FUNCTION ORD('0')
                THEN PERFORM MANIFEST-CONTENT-EVALUATOR-BUILD USING LS-MANIFESTS, WS-FILTER-CACHE-INDEX
            END-IF
        END-PERFORM.
        PERFORM TRANSFORM-MANIFESTS USING LS-MANIFESTS, LS-PROJECTED-SCHEMA, LS-CONTEXT.
    .

    METHOD-ID. MANIFEST-CONTENT-EVALUATOR-INIT.
    LINKAGE SECTION.
    01 LS-TABLE-SCHEMA PIC X(1000).
    01 LS-CONTEXT PIC X(1000).
    PROCEDURE DIVISION USING LS-TABLE-SCHEMA, LS-CONTEXT.
        MOVE FUNCTION REWRITE-NOT(LS-CONTEXT) TO WS-BOUND-EXPR.
        MOVE FUNCTION BIND(LS-TABLE-SCHEMA, WS-BOUND-EXPR, LS-CONTEXT) TO WS-BOUND-EXPR.
    .

    METHOD-ID. MANIFEST-CONTENT-EVALUATOR-BUILD.
    LINKAGE SECTION.
    01 LS-MANIFESTS PIC X(1000).
    01 LS-CACHE-INDEX PIC 9(9) COMP.
    PROCEDURE DIVISION USING LS-MANIFESTS, LS-CACHE-INDEX.
        MOVE FUNCTION MANIFEST-CONTENT-ID(LS-MANIFESTS) TO WS-MANIFEST-CONTENT-ID.
        MOVE WS-BOUND-EXPR TO WS-FILTER-CACHE-EVALUATOR(LS-CACHE-INDEX).
    .

    METHOD-ID. TRANSFORM-MANIFESTS.
    LINKAGE SECTION.
    01 LS-MANIFESTS PIC X(1000).
    01 LS-PROJECTED-SCHEMA PIC X(1000).
    01 LS-CONTEXT PIC X(1000).
    PROCEDURE DIVISION USING LS-MANIFESTS, LS-PROJECTED-SCHEMA, LS-CONTEXT.
        PERFORM VARYING WS-FILTER-CACHE-INDEX FROM 1 BY 1 UNTIL WS-FILTER-CACHE-INDEX > 100
            IF WS-FILTER-CACHE-SPEC-ID(WS-FILTER-CACHE-INDEX) NOT = FUNCTION ORD('0')
                THEN PERFORM MANIFEST-EVAL-VISITOR USING WS-FILTER-CACHE-EVALUATOR(WS-FILTER-CACHE-INDEX), LS-MANIFESTS
            END-IF
        END-PERFORM.
        PERFORM TRANSFORM-ENTRIES USING LS-MANIFESTS, LS-PROJECTED-SCHEMA, LS-CONTEXT.
    .

    METHOD-ID. MANIFEST-EVAL-VISITOR.
    LINKAGE SECTION.
    01 LS-BOUND-EXPR PIC X(1000).
    01 LS-MANIFESTS PIC X(1000).
    PROCEDURE DIVISION USING LS-BOUND-EXPR, LS-MANIFESTS.
        MOVE FUNCTION MANIFEST-CONTENT-ID(LS-MANIFESTS) TO WS-MANIFEST-CONTENT-ID.
        PERFORM VARYING WS-EXPR-INDEX FROM 1 BY 1 UNTIL WS-EXPR-INDEX > LENGTH OF LS-BOUND-EXPR
            EVALUATE TRUE
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('0')
                    CONTINUE
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('1')
                    RETURN ROWS-MIGHT-MATCH
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('2')
                    RETURN ROWS-CANNOT-MATCH
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('3')
                    PERFORM EVALUATE-NOT USING WS-EXPR(WS-EXPR-INDEX + 1)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('4')
                    PERFORM EVALUATE-AND USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('5')
                    PERFORM EVALUATE-OR USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('6')
                    PERFORM EVALUATE-IS-NULL USING WS-EXPR(WS-EXPR-INDEX + 1)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('7')
                    PERFORM EVALUATE-NOT-NULL USING WS-EXPR(WS-EXPR-INDEX + 1)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('8')
                    PERFORM EVALUATE-IS-NAN USING WS-EXPR(WS-EXPR-INDEX + 1)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('9')
                    PERFORM EVALUATE-NOT-NAN USING WS-EXPR(WS-EXPR-INDEX + 1)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('A')
                    PERFORM EVALUATE-LT USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('B')
                    PERFORM EVALUATE-LE USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('C')
                    PERFORM EVALUATE-GT USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('D')
                    PERFORM EVALUATE-GE USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('E')
                    PERFORM EVALUATE-EQ USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('F')
                    PERFORM EVALUATE-NE USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('G')
                    PERFORM EVALUATE-IN USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('H')
                    PERFORM EVALUATE-NOT-IN USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('I')
                    PERFORM EVALUATE-STARTS-WITH USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
                WHEN WS-EXPR(WS-EXPR-INDEX) = FUNCTION ORD('J')
                    PERFORM EVALUATE-NOT-STARTS-WITH USING WS-EXPR(WS-EXPR-INDEX + 1), WS-EXPR(WS-EXPR-INDEX + 2)
            END-EVALUATE
            ADD 1 TO WS-EXPR-INDEX
        END-PERFORM.
    .

    METHOD-ID. TRANSFORM-ENTRIES.
    LINKAGE SECTION.
    01 LS-MANIFESTS PIC X(1000).
    01 LS-PROJECTED-SCHEMA PIC X(1000).
    01 LS-CONTEXT PIC X(1000).
    PROCEDURE DIVISION USING LS-MANIFESTS, LS-PROJECTED-SCHEMA, LS-CONTEXT.
        PERFORM MANIFEST-ENTRIES USING LS-MANIFESTS, LS-PROJECTED-SCHEMA.
        PERFORM APPEND-READABLE-METRICS USING LS-MANIFESTS, LS-PROJECTED-SCHEMA, LS-CONTEXT.
    .

    METHOD-ID. MANIFEST-ENTRIES.
    LINKAGE SECTION.
    01 LS-MANIFESTS PIC X(1000).
    01 LS-PROJECTED-SCHEMA PIC X(1000).
    PROCEDURE DIVISION USING LS-MANIFESTS, LS-PROJECTED-SCHEMA.
        PERFORM VARYING WS-ENTRY-INDEX FROM 1 BY 1 UNTIL WS-ENTRY-INDEX > LENGTH OF LS-MANIFESTS
            MOVE LS-MANIFESTS(WS-ENTRY-INDEX) TO WS-ENTRY
            PERFORM WRAP-ENTRY USING WS-ENTRY, LS-PROJECTED-SCHEMA
        END-PERFORM.
    .

    METHOD-ID. WRAP-ENTRY.
    LINKAGE SECTION.
    01 LS-ENTRY PIC X(1000).
    01 LS-PROJECTED-SCHEMA PIC X(1000).
    PROCEDURE DIVISION USING LS-ENTRY, LS-PROJECTED-SCHEMA.
        PERFORM STRUCT-PROJECTION USING LS-ENTRY, LS-PROJECTED-SCHEMA.
    .

    METHOD-ID. APPEND-READABLE-METRICS.
    LINKAGE SECTION.
    01 LS-MANIFESTS PIC X(1000).
    01 LS-PROJECTED-SCHEMA PIC X(1000).
    01 LS-CONTEXT PIC X(1000).
    PROCEDURE DIVISION USING LS-MANIFESTS, LS-PROJECTED-SCHEMA, LS-CONTEXT.
        MOVE FUNCTION FIND-READABLE-METRICS-FIELD(LS-PROJECTED-SCHEMA) TO WS-READABLE-METRICS-FIELD.
        IF WS-READABLE-METRICS-FIELD IS NOT NULL
            THEN PERFORM REMOVE-READABLE-METRICS USING LS-PROJECTED-SCHEMA, WS-READABLE-METRICS-FIELD
            PERFORM STRUCT-PROJECTION USING LS-MANIFESTS, LS-PROJECTED-SCHEMA
            PERFORM VARYING WS-ENTRY-INDEX FROM 1 BY 1 UNTIL WS-ENTRY-INDEX > LENGTH OF LS-MANIFESTS
                MOVE LS-MANIFESTS(WS-ENTRY-INDEX) TO WS-ENTRY
                PERFORM ADD-READABLE-METRICS USING WS-ENTRY, WS-READABLE-METRICS-FIELD
            END-PERFORM
        ELSE
            PERFORM STRUCT-PROJECTION USING LS-MANIFESTS, LS-PROJECTED-SCHEMA
        END-IF.
    .

    METHOD-ID. REMOVE-READABLE-METRICS.
    LINKAGE SECTION.
    01 LS-PROJECTED-SCHEMA PIC X(1000).
    01 LS-READABLE-METRICS-FIELD PIC X(100).
    PROCEDURE DIVISION USING LS-PROJECTED-SCHEMA, LS-READABLE-METRICS-FIELD.
        MOVE FUNCTION GET-PROJECTED-IDS(LS-READABLE-METRICS-FIELD) TO WS-READABLE-METRICS-IDS.
        MOVE FUNCTION SELECT-NOT(LS-PROJECTED-SCHEMA, WS-READABLE-METRICS-IDS) TO LS-PROJECTED-SCHEMA.
    .

    METHOD-ID. ADD-READABLE-METRICS.
    LINKAGE SECTION.
    01 LS-ENTRY PIC X(1000).
    01 LS-READABLE-METRICS-FIELD PIC X(100).
    PROCEDURE DIVISION USING LS-ENTRY, LS-READABLE-METRICS-FIELD.
        PERFORM STRUCT-PROJECTION USING LS-ENTRY, LS-PROJECTED-SCHEMA.
        PERFORM READABLE-METRICS-STRUCT USING LS-ENTRY, LS-READABLE-METRICS-FIELD.
        PERFORM STRUCT-WITH-READABLE-METRICS USING LS-ENTRY, WS-READABLE-METRICS-STRUCT, WS-READABLE-METRICS-POSITION.
    .

    METHOD-ID. READABLE-METRICS-STRUCT.
    LINKAGE SECTION.
    01 LS-ENTRY PIC X(1000).
    01 LS-READABLE-METRICS