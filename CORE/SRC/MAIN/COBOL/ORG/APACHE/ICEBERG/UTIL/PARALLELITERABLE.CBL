IDENTIFICATION DIVISION.
PROGRAM-ID. PARALLEL-ITERABLE.

ENVIRONMENT DIVISION.
REPOSITORY.
    COPY "CLOSEABLE-GROUP.cpy".
    COPY "CLOSEABLE-ITERABLE.cpy".
    COPY "CLOSEABLE-ITERATOR.cpy".

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-ITERABLES OCCURS 1 TO 1000 DEPENDING ON WS-ITERABLES-COUNT PIC X(10).
01 WS-ITERABLES-COUNT PIC 9(6).
01 WS-WORKER-POOL PIC 9(6).
01 WS-MAX-QUEUE-SIZE PIC 9(6) VALUE 30000.

01 WS-PARALLEL-ITERATOR.
    05 WS-TASKS PIC X(10) OCCURS 1 TO 100 DEPENDING ON WS-TASKS-COUNT.
    05 WS-TASKS-COUNT PIC 9(6).
    05 WS-YIELDED-TASKS PIC X(10) OCCURS 1 TO 100 DEPENDING ON WS-YIELDED-TASKS-COUNT.
    05 WS-YIELDED-TASKS-COUNT PIC 9(6).
    05 WS-TASK-FUTURES PIC X(10) OCCURS 1 TO 200 DEPENDING ON WS-TASK-FUTURES-COUNT.
    05 WS-TASK-FUTURES-COUNT PIC 9(6).
    05 WS-QUEUE PIC X(10) OCCURS 1 TO 30000 DEPENDING ON WS-QUEUE-COUNT.
    05 WS-QUEUE-COUNT PIC 9(6).
    05 WS-CLOSED PIC 9 VALUE 0.

LINKAGE SECTION.
01 LNK-ITERABLES PIC X(10) OCCURS 1 TO 1000 DEPENDING ON LNK-ITERABLES-COUNT.
01 LNK-ITERABLES-COUNT PIC 9(6).
01 LNK-WORKER-POOL PIC 9(6).

PROCEDURE DIVISION USING LNK-ITERABLES, LNK-ITERABLES-COUNT, LNK-WORKER-POOL.
MAIN-PROCEDURE.
    MOVE LNK-ITERABLES-COUNT TO WS-ITERABLES-COUNT.
    MOVE LNK-ITERABLES TO WS-ITERABLES.
    MOVE LNK-WORKER-POOL TO WS-WORKER-POOL.

    PERFORM INITIALIZE-PARALLEL-ITERATOR.
    PERFORM PARALLEL-ITERATOR-LOOP.
    PERFORM CLOSE-PARALLEL-ITERATOR.
    STOP RUN.

INITIALIZE-PARALLEL-ITERATOR.
    MOVE 0 TO WS-TASKS-COUNT.
    MOVE 0 TO WS-YIELDED-TASKS-COUNT.
    MOVE 0 TO WS-TASK-FUTURES-COUNT.
    MOVE 0 TO WS-QUEUE-COUNT.
    MOVE 0 TO WS-CLOSED.

PARALLEL-ITERATOR-LOOP.
    PERFORM CHECK-TASKS UNTIL WS-CLOSED = 1.

CHECK-TASKS.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > WS-TASK-FUTURES-COUNT
        IF WS-TASK-FUTURES(I) = SPACES OR WS-TASK-FUTURES(I) IS DONE
            IF WS-TASK-FUTURES(I) NOT = SPACES
                PERFORM CHECK-TASK-FAILURE
            END-IF
            PERFORM SUBMIT-NEXT-TASK
        ELSE
            SET WS-HAS-RUNNING-TASK TO TRUE
        END-IF
    END-PERFORM.
    IF WS-HAS-RUNNING-TASK OR WS-TASKS-COUNT > 0
        RETURN TRUE
    ELSE
        RETURN FALSE
    END-IF.

CHECK-TASK-FAILURE.
    PERFORM GET-TASK-CONTINUATION.
    IF EXCEPTION-OCCURRED
        IF EXCEPTION-OBJECT IS RUNTIME-EXCEPTION
            RAISE EXCEPTION-OBJECT
        ELSE
            RAISE NEW RUNTIME-EXCEPTION "Failed while running parallel task", EXCEPTION-OBJECT
        END-IF
    ELSE
        MOVE TASK-CONTINUATION TO WS-YIELDED-TASKS(WS-YIELDED-TASKS-COUNT + 1)
        ADD 1 TO WS-YIELDED-TASKS-COUNT
    END-IF.

SUBMIT-NEXT-TASK.
    IF WS-QUEUE-COUNT < WS-MAX-QUEUE-SIZE
        IF WS-YIELDED-TASKS-COUNT > 0
            MOVE WS-YIELDED-TASKS(1) TO WS-TASK-FUTURES(I)
            PERFORM REMOVE-FIRST-YIELDED-TASK
        ELSE IF WS-TASKS-COUNT > 0
            MOVE WS-TASKS(1) TO WS-TASK-FUTURES(I)
            PERFORM REMOVE-FIRST-TASK
        ELSE
            MOVE SPACES TO WS-TASK-FUTURES(I)
        END-IF
    ELSE
        MOVE SPACES TO WS-TASK-FUTURES(I)
    END-IF.

REMOVE-FIRST-YIELDED-TASK.
    PERFORM VARYING J FROM 1 BY 1 UNTIL J >= WS-YIELDED-TASKS-COUNT
        MOVE WS-YIELDED-TASKS(J + 1) TO WS-YIELDED-TASKS(J)
    END-PERFORM.
    SUBTRACT 1 FROM WS-YIELDED-TASKS-COUNT.

REMOVE-FIRST-TASK.
    PERFORM VARYING J FROM 1 BY 1 UNTIL J >= WS-TASKS-COUNT
        MOVE WS-TASKS(J + 1) TO WS-TASKS(J)
    END-PERFORM.
    SUBTRACT 1 FROM WS-TASKS-COUNT.

GET-TASK-CONTINUATION.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > WS-TASK-FUTURES-COUNT
        IF WS-TASK-FUTURES(I) NOT = SPACES
            MOVE WS-TASK-FUTURES(I) TO TASK-CONTINUATION
            MOVE SPACES TO WS-TASK-FUTURES(I)
            RETURN
        END-IF
    END-PERFORM.
    MOVE SPACES TO TASK-CONTINUATION.

CLOSE-PARALLEL-ITERATOR.
    IF WS-CLOSED = 0
        SET WS-CLOSED TO 1
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > WS-YIELDED-TASKS-COUNT
            CLOSE WS-YIELDED-TASKS(I)
        END-PERFORM
        MOVE 0 TO WS-YIELDED-TASKS-COUNT
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > WS-TASK-FUTURES-COUNT
            IF WS-TASK-FUTURES(I) NOT = SPACES
                CANCEL WS-TASK-FUTURES(I)
                MOVE SPACES TO WS-TASK-FUTURES(I)
            END-IF
        END-PERFORM
        MOVE 0 TO WS-QUEUE-COUNT
    END-IF.