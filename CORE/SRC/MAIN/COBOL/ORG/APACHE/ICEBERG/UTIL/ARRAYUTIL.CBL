IDENTIFICATION DIVISION.
PROGRAM-ID. ARRAYUTIL.

ENVIRONMENT DIVISION.
REPOSITORY.
    FUNCTION ALL INTRINSIC.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 EMPTY-BOOLEAN-ARRAY PIC X(0) VALUE X"".
01 EMPTY-BYTE-ARRAY PIC X(0) VALUE X"".
01 EMPTY-SHORT-ARRAY PIC X(0) VALUE X"".
01 EMPTY-INT-ARRAY PIC X(0) VALUE X"".
01 EMPTY-LONG-ARRAY PIC X(0) VALUE X"".
01 EMPTY-FLOAT-ARRAY PIC X(0) VALUE X"".
01 EMPTY-DOUBLE-ARRAY PIC X(0) VALUE X"".

PROCEDURE DIVISION.

CONVERT-INT-LIST.
    MOVE NULLS TO RETURN-CODE.
    IF INTS NOT NULL
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF INTS
            MOVE INTS(I) TO INT-LIST(I)
        END-PERFORM
        RETURN INT-LIST
    ELSE
        RETURN NULL
    END-IF.

CONVERT-INT-ARRAY.
    MOVE NULLS TO RETURN-CODE.
    IF INTS NOT NULL
        MOVE 1 TO I
        PERFORM VARYING V IN INTS
            MOVE V TO INT-ARRAY(I)
            ADD 1 TO I
        END-PERFORM
        RETURN INT-ARRAY
    ELSE
        RETURN NULL
    END-IF.

CONVERT-LONG-LIST.
    MOVE NULLS TO RETURN-CODE.
    IF LONGS NOT NULL
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF LONGS
            MOVE LONGS(I) TO LONG-LIST(I)
        END-PERFORM
        RETURN LONG-LIST
    ELSE
        RETURN NULL
    END-IF.

CONVERT-UNMODIFIABLE-LONG-LIST.
    MOVE NULLS TO RETURN-CODE.
    IF LONGS NOT NULL
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF LONGS
            MOVE LONGS(I) TO UNMODIFIABLE-LONG-LIST(I)
        END-PERFORM
        RETURN UNMODIFIABLE-LONG-LIST
    ELSE
        RETURN NULL
    END-IF.

CONVERT-LONG-ARRAY.
    MOVE NULLS TO RETURN-CODE.
    IF LONGS NOT NULL
        MOVE 1 TO I
        PERFORM VARYING V IN LONGS
            MOVE V TO LONG-ARRAY(I)
            ADD 1 TO I
        END-PERFORM
        RETURN LONG-ARRAY
    ELSE
        RETURN NULL
    END-IF.

CONVERT-BOOLEAN-PRIMITIVE.
    MOVE NULLS TO RETURN-CODE.
    IF BOOLEAN-ARRAY NOT NULL
        MOVE 1 TO I
        PERFORM VARYING V IN BOOLEAN-ARRAY
            MOVE V TO BOOLEAN-PRIMITIVE(I)
            ADD 1 TO I
        END-PERFORM
        RETURN BOOLEAN-PRIMITIVE
    ELSE
        RETURN EMPTY-BOOLEAN-ARRAY
    END-IF.

CONVERT-BYTE-PRIMITIVE.
    MOVE NULLS TO RETURN-CODE.
    IF BYTE-ARRAY NOT NULL
        MOVE 1 TO I
        PERFORM VARYING V IN BYTE-ARRAY
            MOVE V TO BYTE-PRIMITIVE(I)
            ADD 1 TO I
        END-PERFORM
        RETURN BYTE-PRIMITIVE
    ELSE
        RETURN EMPTY-BYTE-ARRAY
    END-IF.

CONVERT-SHORT-PRIMITIVE.
    MOVE NULLS TO RETURN-CODE.
    IF SHORT-ARRAY NOT NULL
        MOVE 1 TO I
        PERFORM VARYING V IN SHORT-ARRAY
            MOVE V TO SHORT-PRIMITIVE(I)
            ADD 1 TO I
        END-PERFORM
        RETURN SHORT-PRIMITIVE
    ELSE
        RETURN EMPTY-SHORT-ARRAY
    END-IF.

CONVERT-INT-PRIMITIVE.
    MOVE NULLS TO RETURN-CODE.
    IF INT-ARRAY NOT NULL
        MOVE 1 TO I
        PERFORM VARYING V IN INT-ARRAY
            MOVE V TO INT-PRIMITIVE(I)
            ADD 1 TO I
        END-PERFORM
        RETURN INT-PRIMITIVE
    ELSE
        RETURN EMPTY-INT-ARRAY
    END-IF.

CONVERT-LONG-PRIMITIVE.
    MOVE NULLS TO RETURN-CODE.
    IF LONG-ARRAY NOT NULL
        MOVE 1 TO I
        PERFORM VARYING V IN LONG-ARRAY
            MOVE V TO LONG-PRIMITIVE(I)
            ADD 1 TO I
        END-PERFORM
        RETURN LONG-PRIMITIVE
    ELSE
        RETURN EMPTY-LONG-ARRAY
    END-IF.

CONVERT-FLOAT-PRIMITIVE.
    MOVE NULLS TO RETURN-CODE.
    IF FLOAT-ARRAY NOT NULL
        MOVE 1 TO I
        PERFORM VARYING V IN FLOAT-ARRAY
            MOVE V TO FLOAT-PRIMITIVE(I)
            ADD 1 TO I
        END-PERFORM
        RETURN FLOAT-PRIMITIVE
    ELSE
        RETURN EMPTY-FLOAT-ARRAY
    END-IF.

CONVERT-DOUBLE-PRIMITIVE.
    MOVE NULLS TO RETURN-CODE.
    IF DOUBLE-ARRAY NOT NULL
        MOVE 1 TO I
        PERFORM VARYING V IN DOUBLE-ARRAY
            MOVE V TO DOUBLE-PRIMITIVE(I)
            ADD 1 TO I
        END-PERFORM
        RETURN DOUBLE-PRIMITIVE
    ELSE
        RETURN EMPTY-DOUBLE-ARRAY
    END-IF.

ADD-ELEMENT.
    MOVE NULLS TO RETURN-CODE.
    IF ARRAY NOT NULL
        COMPUTE NEW-ARRAY-LENGTH = LENGTH OF ARRAY + 1
        MOVE ARRAY TO NEW-ARRAY
        MOVE ELEMENT TO NEW-ARRAY(NEW-ARRAY-LENGTH)
        RETURN NEW-ARRAY
    ELSE
        MOVE 1 TO NEW-ARRAY-LENGTH
        MOVE ELEMENT TO NEW-ARRAY(1)
        RETURN NEW-ARRAY
    END-IF.

IS-STRICTLY-ASCENDING.
    MOVE NULLS TO RETURN-CODE.
    PERFORM VARYING I FROM 2 BY 1 UNTIL I > LENGTH OF ARRAY
        IF ARRAY(I) <= ARRAY(I-1)
            RETURN FALSE
        END-IF
    END-PERFORM
    RETURN TRUE.

CONCAT-ARRAYS.
    MOVE NULLS TO RETURN-CODE.
    COMPUTE TOTAL-LENGTH = 0
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > COUNT OF ARRAYS
        ADD LENGTH OF ARRAYS(I) TO TOTAL-LENGTH
    END-PERFORM
    MOVE COMPONENT-TYPE TO NEW-ARRAY-TYPE
    MOVE TOTAL-LENGTH TO NEW-ARRAY-LENGTH
    MOVE 1 TO CURRENT-INDEX
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > COUNT OF ARRAYS
        MOVE ARRAYS(I) TO NEW-ARRAY(CURRENT-INDEX:LENGTH OF ARRAYS(I))
        ADD LENGTH OF ARRAYS(I) TO CURRENT-INDEX
    END-PERFORM
    RETURN NEW-ARRAY.

STOP RUN.