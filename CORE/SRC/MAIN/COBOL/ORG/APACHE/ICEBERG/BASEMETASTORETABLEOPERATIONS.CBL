IDENTIFICATION DIVISION.
PROGRAM-ID. BASE-METASTORE-TABLE-OPERATIONS.

ENVIRONMENT DIVISION.
SPECIAL-NAMES.
    FUNCTION ISJUSTCREATED IS ALWAYS-TRUE WHEN NEW-TABLE IS TRUE
        AND METADATA-LOCATION IS NOT NULL.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 CURRENT-METADATA USAGE IS POINTER.
01 CURRENT-METADATA-LOCATION PIC X(256) VALUE SPACES.
01 SHOULD-REFRESH PIC 9 VALUE 1.
01 VERSION PIC 9(9) VALUE -1.

01 TABLE-TYPE-PROP PIC X(16) VALUE "table_type".
01 ICEBERG-TABLE-TYPE-VALUE PIC X(7) VALUE "iceberg".
01 METADATA-LOCATION-PROP PIC X(17) VALUE "metadata_location".
01 PREVIOUS-METADATA-LOCATION-PROP PIC X(24) VALUE "previous_metadata_location".

01 METADATA-FOLDER-NAME PIC X(8) VALUE "metadata".

PROCEDURE DIVISION.

METHODS SECTION.

METHOD-ID. TABLENAME.
    *> The full name of the table used for logging purposes only.
    *> For example for HiveTableOperations it is catalogName + "." + database + "." + table.
    ABSTRACT.

METHOD-ID. CURRENT.
    IF SHOULD-REFRESH THEN
        PERFORM REFRESH
    END-IF.
    RETURN CURRENT-METADATA.

METHOD-ID. CURRENT-METADATA-LOCATION.
    RETURN CURRENT-METADATA-LOCATION.

METHOD-ID. CURRENT-VERSION.
    RETURN VERSION.

METHOD-ID. REFRESH.
    INITIALIZE CURRENT-METADATA TO NULL.
    INITIALIZE CURRENT-METADATA-LOCATION TO SPACES.
    MOVE -1 TO VERSION.
    PERFORM DO-REFRESH.
    RETURN CURRENT().

METHOD-ID. DO-REFRESH.
    THROW "UnsupportedOperationException" WITH MESSAGE "Not implemented: doRefresh".

METHOD-ID. COMMIT.
    IF CURRENT() IS NOT EQUAL TO BASE THEN
        IF BASE IS NOT NULL THEN
            THROW "CommitFailedException" WITH MESSAGE "Cannot commit: stale table metadata"
        ELSE
            *> when current is non-null, the table exists. but when base is null, the commit is trying
            *> to create the table
            THROW "AlreadyExistsException" WITH MESSAGE "Table already exists: " CONCATENATE TABLENAME
        END-IF
    END-IF.

    IF BASE IS EQUAL TO METADATA THEN
        DISPLAY "Nothing to commit."
        EXIT METHOD
    END-IF.

    PERFORM DO-COMMIT USING BASE, METADATA.
    CALL "CatalogUtil.deleteRemovedMetadataFiles" USING IO(), BASE, METADATA.
    PERFORM REQUEST-REFRESH.

    DISPLAY "Successfully committed to table " CONCATENATE TABLENAME " in " CONCATENATE (FUNCTION CURRENTTIME - START-TIME) "ms".

METHOD-ID. DO-COMMIT.
    THROW "UnsupportedOperationException" WITH MESSAGE "Not implemented: doCommit".

METHOD-ID. REQUEST-REFRESH.
    MOVE 1 TO SHOULD-REFRESH.

METHOD-ID. DISABLE-REFRESH.
    MOVE 0 TO SHOULD-REFRESH.

METHOD-ID. WRITENEWMETADATAIFREQUIRED.
    IF ISJUSTCREATED AND METADATA-LOCATION IS NOT NULL THEN
        RETURN METADATA-LOCATION
    ELSE
        PERFORM WRITENEWMETADATA USING METADATA, VERSION + 1
        RETURN RESULT
    END-IF.

METHOD-ID. WRITENEWMETADATA.
    MOVE NEWMETADATAFILEPATH(METADATA, ARG2) TO NEW-METADATA-LOCATION.
    CALL "io.newOutputFile" USING NEW-METADATA-LOCATION INTO NEW-METADATA-FILE.
    CALL "TableMetadataParser.overwrite" USING METADATA, NEW-METADATA-FILE.
    RETURN NEW-METADATA-LOCATION.

METHOD-ID. REFRESHFROMMETADATALOCATION.
    CALL "REFRESHFROMMETADATALOCATION" USING ARG1, NULL, 20.

METHOD-ID. REFRESHFROMMETADATALOCATION.
    CALL "REFRESHFROMMETADATALOCATION" USING ARG1, NULL, ARG2.

METHOD-ID. REFRESHFROMMETADATALOCATION.
    CALL "REFRESHFROMMETADATALOCATION" USING ARG1, ARG2, ARG3, 
        FUNCTION "TABLELOADERFUNC".

METHOD-ID. REFRESHFROMMETADATALOCATION.
    IF CURRENT-METADATA-LOCATION IS NOT EQUAL TO ARG1 THEN
        DISPLAY "Refreshing table metadata from new version: " CONCATENATE ARG1.

        CALL "TASKS.foreach" USING ARG1
            RETRY ARG3
            EXPONENTIAL-BACKOFF 100, 5000, 600000, 4.0
            THROW-FAILURE-WHEN-FINISHED
            STOP-RETRY-ON NotFoundException
            SHOULD-RETRY-TEST ARG2
            RUN "TABLELOADERFUNC".

        MOVE METADATA-UUID TO NEW-UUID.
        IF CURRENT-METADATA IS NOT NULL AND CURRENT-METADATA-UUID IS NOT NULL AND NEW-UUID IS NOT NULL THEN
            IF NEW-UUID IS NOT EQUAL TO CURRENT-METADATA-UUID THEN
                THROW "IllegalStateException" WITH MESSAGE "Table UUID does not match: current=" CONCATENATE CURRENT-METADATA-UUID " != refreshed=" CONCATENATE NEW-UUID
            END-IF
        END-IF.

        MOVE METADATA TO CURRENT-METADATA.
        MOVE ARG1 TO CURRENT-METADATA-LOCATION.
        MOVE PARSEVERSION(ARG1) TO VERSION.
    END-IF.
    MOVE 0 TO SHOULD-REFRESH.

METHOD-ID. METADATAFILELOCATION.
    PERFORM METADATAFILELOCATION-HELPER USING CURRENT(), ARG1 INTO RESULT.

METHOD-ID. METADATAFILELOCATION-HELPER.
    MOVE ARG1(METADATA-LOCATION-PROP) TO METADATA-LOCATION.
    IF METADATA-LOCATION IS NOT NULL THEN
        MOVE CONCATENATE(STRIPTRAILINGSLASH(METADATA-LOCATION), "/", ARG2) TO RESULT
    ELSE
        MOVE CONCATENATE(ARG1(LOCATION), "/", METADATA-FOLDER-NAME, "/", ARG2) TO RESULT
    END-IF.

METHOD-ID. LOCATIONPROVIDER.
    CALL "LocationProviders.locationsFor" USING ARG1(LOCATION), ARG1(PROPERTIES) INTO RESULT.

METHOD-ID. TEMP.
    CREATE TEMPORARY-OPERATIONS.
    MOVE ARG1 TO TEMPORARY-OPERATIONS(CURRENT).
    MOVE "TEMPORARY-OPERATIONS" TO TEMPORARY-OPERATIONS(TABLENAME).
    MOVE "TEMPORARY-OPERATIONS" TO TEMPORARY-OPERATIONS(METADATAFILELOCATION).
    MOVE "TEMPORARY-OPERATIONS" TO TEMPORARY-OPERATIONS(LOCATIONPROVIDER).
    MOVE "TEMPORARY-OPERATIONS" TO TEMPORARY-OPERATIONS(IO).
    MOVE "TEMPORARY-OPERATIONS" TO TEMPORARY-OPERATIONS(ENCRYPTION).
    MOVE "TEMPORARY-OPERATIONS" TO TEMPORARY-OPERATIONS(NEWSNAPSHOTID).
    RETURN TEMPORARY-OPERATIONS.

METHOD-ID. CHECKCOMMITSTATUS.
    PERFORM CHECKCOMMITSTATUS-HELPER USING ARG1, ARG2.
    RETURN RESULT.

METHOD-ID. CHECKCOMMITSTATUS-HELPER.
    CALL "REFRESH" INTO METADATA.
    MOVE METADATA(METADATAFILELOCATION) TO CURRENT-METADATA-LOCATION.
    IF CURRENT-METADATA-LOCATION IS EQUAL TO ARG1 THEN
        RETURN "SUCCESS"
    ELSE
        PERFORM CHECKPREVIOUSMETADATAFILES USING ARG1, ARG2 INTO RESULT
        RETURN RESULT
    END-IF.

METHOD-ID. CHECKPREVIOUSMETADATAFILES.
    MOVE 0 TO FOUND-MATCH.
    PERFORM VARYING PREVIOUS-FILE IN METADATA(PREVIOUSFILES)
        WHEN PREVIOUS-FILE(FILE) IS EQUAL TO ARG1
            MOVE 1 TO FOUND-MATCH
            EXIT PERFORM
        END-WHEN
    END-PERFORM.
    IF FOUND-MATCH IS EQUAL TO 1 THEN
        RETURN "SUCCESS"
    ELSE
        RETURN "FAILURE"
    END-IF.

METHOD-ID. NEWMETADATAFILEPATH.
    MOVE ARG2(METADATACOMPRESSIONPROP, METADATACOMPRESSIONDEFAULT) TO CODEC-NAME.
    MOVE METADATAFILELOCATION-HELPER(ARG1, CONCATENATE(FUNCTION LPAD(ARG2, 5, '0'), "-", FUNCTION UUID, TABLEMETADATAPARSER.GETFILEEXTENSION(CODEC-NAME))) INTO RESULT.
    RETURN RESULT.

METHOD-ID. PARSEVERSION.
    MOVE FUNCTION INDEXOF(ARG1, '/') + 1 TO VERSION-START.
    MOVE FUNCTION INDEXOF(ARG1, '-', VERSION-START) TO VERSION-END.
    IF VERSION-END < 0 THEN
        RETURN -1
    END-IF.
    MOVE FUNCTION SUBSTR(ARG1, VERSION-START, VERSION-END - VERSION-START) TO VERSION-STR.
    MOVE FUNCTION INTEGER(VERSION-STR) TO RESULT.
    RETURN RESULT.

COPY "TABLEMETADATAPARSER.cbl".
COPY "LOCATIONUTIL.cbl".
COPY "TASKS.cbl".
COPY "CATALOGUTIL.cbl".
COPY "LOCATIONPROVIDERS.cbl".

END PROGRAM BASE-METASTORE-TABLE-OPERATIONS.