IDENTIFICATION DIVISION.
PROGRAM-ID. BaseRewriteDataFilesAction.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT ICEBERG-TABLE
    ASSIGN TO DYNAMIC FILENAME
    ORGANIZATION IS INDEXED
    ACCESS MODE IS DYNAMIC
    RECORD KEY IS PARTITION-KEY.

DATA DIVISION.
FILE SECTION.
FD ICEBERG-TABLE.
01 ICEBERG-RECORD.
   05 PARTITION-KEY PIC X(100).
   05 DATA-FILE-INFO.
      10 FILE-SIZE PIC 9(18) COMP-3.
      10 SNAPSHOT-ID PIC 9(18) COMP-3.
      10 SEQUENCE-NUMBER PIC 9(18) COMP-3.
      10 PARTITION-VALUE PIC X(100).

WORKING-STORAGE SECTION.
01 WS-TABLE-PROPERTIES.
   05 SPLIT-SIZE PIC 9(18) COMP-3 VALUE 0.
   05 WRITE-TARGET-FILE-SIZE PIC 9(18) COMP-3 VALUE 0.
   05 SPLIT-LOOKBACK PIC 9(9) COMP VALUE 0.
   05 SPLIT-OPEN-FILE-COST PIC 9(18) COMP-3 VALUE 0.
   05 CASE-SENSITIVE PIC X VALUE 'N'.
   05 USE-STARTING-SEQUENCE-NUMBER PIC X VALUE 'N'.

01 WS-REWRITE-DATA-FILES-RESULT.
   05 DELETED-DATA-FILES OCCURS 0 TO 9999 TIMES DEPENDING ON DELETE-COUNT PIC X(100).
   05 ADDED-DATA-FILES OCCURS 0 TO 9999 TIMES DEPENDING ON ADD-COUNT PIC X(100).
   05 DELETE-COUNT PIC 9(9) COMP.
   05 ADD-COUNT PIC 9(9) COMP.

PROCEDURE DIVISION.
MAIN-PARAGRAPH.
    PERFORM INITIALIZE-PROPERTIES.
    PERFORM PLAN-FILE-SCAN-TASKS.
    PERFORM REWRITE-DATA-FILES.
    MOVE WS-REWRITE-DATA-FILES-RESULT TO RETURN-VALUE.
    STOP RUN.

INITIALIZE-PROPERTIES.
    MOVE FUNCTION LONG-LONG(SPLIT-SIZE) TO SPLIT-SIZE.
    MOVE FUNCTION LONG-LONG(WRITE-TARGET-FILE-SIZE) TO WRITE-TARGET-FILE-SIZE.
    MOVE SPLIT-LOOKBACK TO SPLIT-LOOKBACK.
    MOVE FUNCTION LONG-LONG(SPLIT-OPEN-FILE-COST) TO SPLIT-OPEN-FILE-COST.
    IF CASE-SENSITIVE = 'Y'
        MOVE 'Y' TO CASE-SENSITIVE
    ELSE
        MOVE 'N' TO CASE-SENSITIVE.
    IF USE-STARTING-SEQUENCE-NUMBER = 'Y'
        MOVE 'Y' TO USE-STARTING-SEQUENCE-NUMBER
    ELSE 
        MOVE 'N' TO USE-STARTING-SEQUENCE-NUMBER.

PLAN-FILE-SCAN-TASKS.
    OPEN INPUT ICEBERG-TABLE.
    PERFORM UNTIL END-OF-FILE
        READ ICEBERG-TABLE
        IF PARTITION-KEY > SPACES
            PERFORM GROUP-TASKS-BY-PARTITION
        END-IF
    END-PERFORM.
    CLOSE ICEBERG-TABLE.

GROUP-TASKS-BY-PARTITION.
    PERFORM UNTIL END-OF-FILE OR PARTITION-KEY = SPACES
        PERFORM SPLIT-AND-COMBINE-TASKS
        READ ICEBERG-TABLE
    END-PERFORM.

SPLIT-AND-COMBINE-TASKS.
    PERFORM SPLIT-TASKS.
    PERFORM COMBINE-TASKS.

SPLIT-TASKS.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > SPLIT-LOOKBACK
        MOVE PARTITION-VALUE TO PARTITION-KEY
        MOVE FILE-SIZE TO TARGET-SIZE
        PERFORM SPLIT-TASK-WITHIN-PARTITION
    END-PERFORM.

SPLIT-TASK-WITHIN-PARTITION.
    MOVE 0 TO TASK-COUNT.
    PERFORM UNTIL TARGET-SIZE <= WRITE-TARGET-FILE-SIZE OR TASK-COUNT >= SPLIT-LOOKBACK
        ADD 1 TO TASK-COUNT
        PERFORM APPEND-TASK-TO-COMBINED-TASK
        SUBTRACT FILE-SIZE FROM TARGET-SIZE
    END-PERFORM.

APPEND-TASK-TO-COMBINED-TASK.
    MOVE PARTITION-VALUE TO PARTITION-KEY.
    MOVE FILE-SIZE TO FILE-SIZE-IN-TASK.
    MOVE SNAPSHOT-ID TO SNAPSHOT-ID-IN-TASK.
    MOVE SEQUENCE-NUMBER TO SEQUENCE-NUMBER-IN-TASK.
    WRITE ICEBERG-RECORD.

COMBINE-TASKS.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > TASK-COUNT
        PERFORM COMBINE-TASK-FILES
    END-PERFORM.

COMBINE-TASK-FILES.
    READ ICEBERG-RECORD
    MOVE PARTITION-KEY TO PARTITION-WRAPPER
    PERFORM REWRITE-DATA-FILE
    MOVE PARTITION-VALUE TO PARTITION-KEY.

REWRITE-DATA-FILE.
    PERFORM VARYING J FROM 1 BY 1 UNTIL J > TASK-COUNT
        READ ICEBERG-RECORD
        IF PARTITION-KEY = PARTITION-WRAPPER
            PERFORM APPEND-DELETED-FILE
            PERFORM APPEND-ADDED-FILE
        END-IF
    END-PERFORM.

APPEND-DELETED-FILE.
    MOVE PARTITION-VALUE TO DELETED-DATA-FILES(DELETE-COUNT)
    ADD 1 TO DELETE-COUNT.

APPEND-ADDED-FILE.
    MOVE PARTITION-VALUE TO ADDED-DATA-FILES(ADD-COUNT)
    ADD 1 TO ADD-COUNT.

REWRITE-DATA-FILES.
    MOVE 0 TO DELETE-COUNT.
    MOVE 0 TO ADD-COUNT.
    PERFORM REWRITE-FILES.

REWRITE-FILES.
    OPEN I-O ICEBERG-TABLE.
    MOVE 0 TO I.
    PERFORM UNTIL I > DELETE-COUNT
        REWRITE ICEBERG-RECORD FROM DELETED-DATA-FILES(I)
        ADD 1 TO I
    END-PERFORM.
    MOVE 0 TO I.
    PERFORM UNTIL I > ADD-COUNT
        WRITE ICEBERG-RECORD FROM ADDED-DATA-FILES(I)
        ADD 1 TO I
    END-PERFORM.
    CLOSE ICEBERG-TABLE.