IDENTIFICATION DIVISION.
PROGRAM-ID. SCHEMAPARSER.

ENVIRONMENT DIVISION.
REPOSITORY.
    COPY "ICEBERG-TYPES.cpy".

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-SCHEMA-ID       PIC 9(9) COMP.
01 WS-IDENTIFIER-FIELD-IDS   
      OCCURS 32 TIMES PIC 9(9) COMP.
01 WS-NUM-IDENTIFIER-FIELDS  PIC 9(2) COMP.

PROCEDURE DIVISION.

SCHEMA-TO-JSON SECTION.
    PERFORM SCHEMA-TO-JSON-STRUCT.
    STOP RUN.

SCHEMA-TO-JSON-STRUCT SECTION.
    MOVE SCHEMA-ID TO WS-SCHEMA-ID.
    MOVE IDENTIFIER-FIELD-IDS TO WS-IDENTIFIER-FIELD-IDS.
    MOVE COUNT OF IDENTIFIER-FIELD-IDS TO WS-NUM-IDENTIFIER-FIELDS.

    WRITE JSON-START-OBJECT.
    WRITE JSON-FIELD "type" "struct".
    IF WS-SCHEMA-ID > 0
        WRITE JSON-FIELD "schema-id" WS-SCHEMA-ID.
    END-IF.
    IF WS-NUM-IDENTIFIER-FIELDS > 0
        WRITE JSON-FIELD "identifier-field-ids" WS-IDENTIFIER-FIELD-IDS(1:WS-NUM-IDENTIFIER-FIELDS).
    END-IF.
    WRITE JSON-START-ARRAY "fields".
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > COUNT OF FIELDS
        WRITE JSON-START-OBJECT.
        WRITE JSON-FIELD "id" FIELD-ID(I).
        WRITE JSON-FIELD "name" FIELD-NAME(I).
        WRITE JSON-FIELD "required" FIELD-REQUIRED(I).
        WRITE JSON-FIELD "type".
        PERFORM SCHEMA-TO-JSON-TYPE(FIELD-TYPE(I)).
        IF FIELD-DOC(I) IS NOT NULL
            WRITE JSON-FIELD "doc" FIELD-DOC(I).
        END-IF.
        IF FIELD-INITIAL-DEFAULT(I) IS NOT NULL
            WRITE JSON-FIELD "initial-default"
                PERFORM SINGLE-VALUE-TO-JSON(FIELD-TYPE(I), FIELD-INITIAL-DEFAULT(I)).
        END-IF.
        IF FIELD-WRITE-DEFAULT(I) IS NOT NULL
            WRITE JSON-FIELD "write-default"
                PERFORM SINGLE-VALUE-TO-JSON(FIELD-TYPE(I), FIELD-WRITE-DEFAULT(I)).
        END-IF.
        WRITE JSON-END-OBJECT.
    END-PERFORM.
    WRITE JSON-END-ARRAY.
    WRITE JSON-END-OBJECT.

SCHEMA-TO-JSON-TYPE SECTION.
    EVALUATE TRUE
        WHEN TYPE-ID(TYPE-PARAM) = TYPE-ID-STRUCT
            PERFORM SCHEMA-TO-JSON-STRUCT
        WHEN TYPE-ID(TYPE-PARAM) = TYPE-ID-LIST
            PERFORM SCHEMA-TO-JSON-LIST
        WHEN TYPE-ID(TYPE-PARAM) = TYPE-ID-MAP
            PERFORM SCHEMA-TO-JSON-MAP
        WHEN OTHER
            WRITE JSON-PRIMITIVE TYPE-NAME(TYPE-PARAM).
    END-EVALUATE.

SCHEMA-TO-JSON-LIST SECTION.
    WRITE JSON-START-OBJECT.
    WRITE JSON-FIELD "type" "list".
    WRITE JSON-FIELD "element-id" ELEMENT-ID(TYPE-PARAM).
    WRITE JSON-FIELD "element".
    PERFORM SCHEMA-TO-JSON-TYPE(ELEMENT-TYPE(TYPE-PARAM)).
    WRITE JSON-FIELD "element-required" (NOT ELEMENT-OPTIONAL(TYPE-PARAM)).
    WRITE JSON-END-OBJECT.

SCHEMA-TO-JSON-MAP SECTION.
    WRITE JSON-START-OBJECT.
    WRITE JSON-FIELD "type" "map".
    WRITE JSON-FIELD "key-id" KEY-ID(TYPE-PARAM).
    WRITE JSON-FIELD "key".
    PERFORM SCHEMA-TO-JSON-TYPE(KEY-TYPE(TYPE-PARAM)).
    WRITE JSON-FIELD "value-id" VALUE-ID(TYPE-PARAM).
    WRITE JSON-FIELD "value".
    PERFORM SCHEMA-TO-JSON-TYPE(VALUE-TYPE(TYPE-PARAM)).
    WRITE JSON-FIELD "value-required" (NOT VALUE-OPTIONAL(TYPE-PARAM)).
    WRITE JSON-END-OBJECT.

SINGLE-VALUE-TO-JSON SECTION.
    PERFORM CASE-OF-TYPE
        WHEN TYPE-ID(TYPE-PARAM) = TYPE-ID-BOOLEAN
            WRITE JSON-BOOLEAN LITERAL-BOOLEAN(VALUE-PARAM)
        WHEN TYPE-ID(TYPE-PARAM) = TYPE-ID-INT
            WRITE JSON-INTEGER LITERAL-INT(VALUE-PARAM)
        WHEN TYPE-ID(TYPE-PARAM) = TYPE-ID-LONG
            WRITE JSON-INTEGER LITERAL-LONG(VALUE-PARAM)
        WHEN TYPE-ID(TYPE-PARAM) = TYPE-ID-FLOAT
            WRITE JSON-FLOAT LITERAL-FLOAT(VALUE-PARAM)
        WHEN TYPE-ID(TYPE-PARAM) = TYPE-ID-DOUBLE
            WRITE JSON-FLOAT LITERAL-DOUBLE(VALUE-PARAM)
        WHEN TYPE-ID(TYPE-PARAM) = TYPE-ID-STRING
            WRITE JSON-STRING LITERAL-STRING(VALUE-PARAM)
        WHEN OTHER
            CONTINUE
    END-PERFORM.

SCHEMA-FROM-JSON SECTION.
    PERFORM SCHEMA-FROM-JSON-TYPE.
    STOP RUN.

SCHEMA-FROM-JSON-TYPE SECTION.
    EVALUATE TRUE
        WHEN JSON-TYPE = "struct"
            PERFORM SCHEMA-FROM-JSON-STRUCT
        WHEN JSON-TYPE = "list"
            PERFORM SCHEMA-FROM-JSON-LIST
        WHEN JSON-TYPE = "map"
            PERFORM SCHEMA-FROM-JSON-MAP
        WHEN OTHER
            WRITE INVALID-JSON-TYPE JSON-TYPE.
    END-EVALUATE.

SCHEMA-FROM-JSON-STRUCT SECTION.
    MOVE JSON-FIELD-INT("schema-id") TO WS-SCHEMA-ID.
    MOVE JSON-FIELD-SET("identifier-field-ids") TO WS-IDENTIFIER-FIELD-IDS.
    MOVE COUNT OF WS-IDENTIFIER-FIELD-IDS TO WS-NUM-IDENTIFIER-FIELDS.

    WRITE SCHEMA-START.
    WRITE STRUCT-START.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > JSON-ARRAY-SIZE("fields")
        WRITE STRUCT-FIELD-START.
        MOVE JSON-ARRAY-INT("fields", I, "id") TO FIELD-ID(I).
        MOVE JSON-ARRAY-STRING("fields", I, "name") TO FIELD-NAME(I).
        MOVE JSON-ARRAY-BOOL("fields", I, "required") TO FIELD-REQUIRED(I).
        MOVE JSON-ARRAY-FIELD("fields", I, "type") TO TYPE-PARAM.
        PERFORM SCHEMA-FROM-JSON-TYPE.
        MOVE JSON-ARRAY-STRING-NULL("fields", I, "doc") TO FIELD-DOC(I).
        MOVE JSON-ARRAY-LITERAL("fields", I, "initial-default") TO FIELD-INITIAL-DEFAULT(I).
        MOVE JSON-ARRAY-LITERAL("fields", I, "write-default") TO FIELD-WRITE-DEFAULT(I).
        WRITE STRUCT-FIELD-END.
    END-PERFORM.
    WRITE STRUCT-END.
    WRITE SCHEMA-END.

SCHEMA-FROM-JSON-LIST SECTION.
    MOVE JSON-FIELD-INT("element-id") TO ELEMENT-ID(TYPE-PARAM).
    MOVE JSON-FIELD-FIELD("element") TO ELEMENT-TYPE(TYPE-PARAM).
    MOVE (NOT JSON-FIELD-BOOL("element-required")) TO ELEMENT-OPTIONAL(TYPE-PARAM).
    WRITE LIST-TYPE.

SCHEMA-FROM-JSON-MAP SECTION.
    MOVE JSON-FIELD-INT("key-id") TO KEY-ID(TYPE-PARAM).
    MOVE JSON-FIELD-FIELD("key") TO KEY-TYPE(TYPE-PARAM).
    MOVE JSON-FIELD-INT("value-id") TO VALUE-ID(TYPE-PARAM).
    MOVE JSON-FIELD-FIELD("value") TO VALUE-TYPE(TYPE-PARAM).
    MOVE (NOT JSON-FIELD-BOOL("value-required")) TO VALUE-OPTIONAL(TYPE-PARAM).
    WRITE MAP-TYPE.

CASE-OF-TYPE SECTION.
    EVALUATE TYPE-ID(TYPE-PARAM)
        WHEN TYPE-ID-BOOLEAN
            CONTINUE
        WHEN TYPE-ID-INT
            CONTINUE
        WHEN TYPE-ID-LONG
            CONTINUE
        WHEN TYPE-ID-FLOAT
            CONTINUE
        WHEN TYPE-ID-DOUBLE
            CONTINUE
        WHEN TYPE-ID-STRING
            CONTINUE
        WHEN OTHER
            CONTINUE
    END-EVALUATE.