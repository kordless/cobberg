IDENTIFICATION DIVISION.
PROGRAM-ID. HTTP-CLIENT.

ENVIRONMENT DIVISION.
REPOSITORY.
    COPY "REST-EXCEPTION" ALIAS REST-EXCEPTION.
    COPY "ICEBERG-BUILD" ALIAS ICEBERG-BUILD.
    COPY "REST-UTIL" ALIAS REST-UTIL.
    COPY "REST-OBJECT-MAPPER" ALIAS REST-OBJECT-MAPPER.
    COPY "REST-HEADERS" ALIAS REST-HEADERS.
    COPY "REST-RESPONSE" ALIAS REST-RESPONSE.
    COPY "AUTH-SESSION" ALIAS AUTH-SESSION.
    COPY "ERROR-RESPONSE" ALIAS ERROR-RESPONSE.
    COPY "HTTP-REQUEST" ALIAS HTTP-REQUEST.
    COPY "EXPONENTIAL-HTTP-REQUEST-RETRY-STRATEGY" ALIAS EXPONENTIAL-HTTP-REQUEST-RETRY-STRATEGY.
    COPY "PROPERTY-UTIL" ALIAS PROPERTY-UTIL.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-BASE-URI PIC X(256).
01 WS-BASE-HEADERS.
    05 FILLER OCCURS 10 TIMES.
        10 WS-HEADER-NAME PIC X(32).
        10 WS-HEADER-VALUE PIC X(128).
01 WS-OBJECT-MAPPER CLASS-ID.
01 WS-AUTH-SESSION CLASS-ID.
01 WS-HTTP-CLIENT CLASS-ID.
01 WS-REQUEST-INTERCEPTOR CLASS-ID.
01 WS-CONNECTION-MANAGER CLASS-ID.
01 WS-PROPERTIES.
    05 WS-SIGV4-ENABLED PIC X.
    05 WS-SIGV4-REQUEST-INTERCEPTOR-IMPL PIC X(64).
    05 WS-REST-MAX-RETRIES PIC 9(2).
    05 WS-REST-MAX-CONNECTIONS PIC 9(3).
    05 WS-REST-MAX-CONNECTIONS-PER-ROUTE PIC 9(3).
    05 WS-REST-CONNECTION-TIMEOUT-MS PIC 9(10).
    05 WS-REST-SOCKET-TIMEOUT-MS PIC 9(5).

PROCEDURE DIVISION.
BUILD-HTTP-CLIENT.
    INITIALIZE WS-BASE-URI WS-BASE-HEADERS WS-OBJECT-MAPPER WS-AUTH-SESSION
                WS-HTTP-CLIENT WS-REQUEST-INTERCEPTOR WS-CONNECTION-MANAGER
                WS-PROPERTIES.

    PERFORM LOAD-PROPERTIES.
    PERFORM CONFIGURE-CONNECTION-MANAGER.
    PERFORM BUILD-HTTP-CLIENT-INSTANCE.

    EXIT.

LOAD-PROPERTIES.
    MOVE PROPERTY-UTIL:PROPERTY-AS-BOOLEAN(WS-PROPERTIES, "rest.sigv4-enabled", FALSE) 
         TO WS-SIGV4-ENABLED.
    MOVE "org.apache.iceberg.aws.RESTSigV4Signer" TO WS-SIGV4-REQUEST-INTERCEPTOR-IMPL.
    MOVE PROPERTY-UTIL:PROPERTY-AS-INT(WS-PROPERTIES, "rest.client.max-retries", 5) 
         TO WS-REST-MAX-RETRIES.
    MOVE PROPERTY-UTIL:PROPERTY-AS-INT(WS-PROPERTIES, "rest.client.max-connections", 100) 
         TO WS-REST-MAX-CONNECTIONS.
    MOVE PROPERTY-UTIL:PROPERTY-AS-INT(WS-PROPERTIES, "rest.client.connections-per-route", 100) 
         TO WS-REST-MAX-CONNECTIONS-PER-ROUTE.
    MOVE PROPERTY-UTIL:PROPERTY-AS-LONG(WS-PROPERTIES, "rest.client.connection-timeout-ms", 0) 
         TO WS-REST-CONNECTION-TIMEOUT-MS.
    MOVE PROPERTY-UTIL:PROPERTY-AS-INT(WS-PROPERTIES, "rest.client.socket-timeout-ms", 0) 
         TO WS-REST-SOCKET-TIMEOUT-MS.
    EXIT.

CONFIGURE-CONNECTION-MANAGER.
    PERFORM LOAD-CONNECTION-CONFIG.
    SET WS-CONNECTION-MANAGER TO CONFIGURATION-MANAGER-BUILDER.
        ADD SYSTEM-PROPERTIES.
        SET MAX-TOTAL-CONNECTIONS TO WS-REST-MAX-CONNECTIONS.
        SET MAX-CONNECTIONS-PER-ROUTE TO WS-REST-MAX-CONNECTIONS-PER-ROUTE.
        BUILD.
    EXIT.

LOAD-CONNECTION-CONFIG.
    IF WS-REST-CONNECTION-TIMEOUT-MS = 0 AND WS-REST-SOCKET-TIMEOUT-MS = 0
        CONTINUE
    ELSE
        MOVE WS-REST-CONNECTION-TIMEOUT-MS TO CONNECTION-TIMEOUT
        MOVE WS-REST-SOCKET-TIMEOUT-MS TO SOCKET-TIMEOUT
        SET CONNECTION-CONFIG TO CONNECTION-CONFIG-BUILDER
            SET CONNECT-TIMEOUT TO CONNECTION-TIMEOUT MILLISECONDS
            SET SOCKET-TIMEOUT TO SOCKET-TIMEOUT MILLISECONDS
            BUILD
    END-IF.
    EXIT.

BUILD-HTTP-CLIENT-INSTANCE.
    MOVE ICEBERG-BUILD:FULL-VERSION() TO WS-HEADER-VALUE OF WS-BASE-HEADERS(1).
    MOVE "X-Client-Version" TO WS-HEADER-NAME OF WS-BASE-HEADERS(1).
    MOVE ICEBERG-BUILD:GIT-COMMIT-SHORT-ID() TO WS-HEADER-VALUE OF WS-BASE-HEADERS(2). 
    MOVE "X-Client-Git-Commit-Short" TO WS-HEADER-NAME OF WS-BASE-HEADERS(2).

    IF WS-SIGV4-ENABLED = TRUE
        PERFORM LOAD-REQUEST-INTERCEPTOR
        ELSE
        MOVE NULL TO WS-REQUEST-INTERCEPTOR
    END-IF.

    IF WS-PROXY-CREDENTIALS-PROVIDER NOT = NULL
        PERFORM BUILD-PROXY-HTTP-CLIENT
        ELSE
        PERFORM BUILD-PLAIN-HTTP-CLIENT
    END-IF.

    MOVE WS-BASE-URI TO WS-URI.
    MOVE WS-BASE-HEADERS TO WS-HEADERS.
    MOVE WS-OBJECT-MAPPER TO WS-MAPPER.
    MOVE WS-AUTH-SESSION TO WS-SESSION.
    SET WS-HTTP-CLIENT TO HTTP-CLIENT-BUILDER
        SET BASE-URI TO WS-URI
        SET PROXY TO WS-PROXY
        SET PROXY-CREDENTIALS-PROVIDER TO WS-PROXY-CREDENTIALS-PROVIDER
        SET BASE-HEADERS TO WS-HEADERS
        SET OBJECT-MAPPER TO WS-MAPPER  
        SET REQUEST-INTERCEPTOR TO WS-REQUEST-INTERCEPTOR
        SET PROPERTIES TO WS-PROPERTIES
        SET CONNECTION-MANAGER TO WS-CONNECTION-MANAGER
        SET AUTH-SESSION TO WS-SESSION
        BUILD.
    EXIT.

BUILD-PROXY-HTTP-CLIENT.
    MOVE WS-PROXY TO WS-PROXY-HOST.
    MOVE WS-PROXY-CREDENTIALS-PROVIDER TO WS-PROXY-CREDS-PROVIDER.
    EXIT.

BUILD-PLAIN-HTTP-CLIENT.
    MOVE NULL TO WS-PROXY-HOST.
    MOVE NULL TO WS-PROXY-CREDS-PROVIDER.
    EXIT.

LOAD-REQUEST-INTERCEPTOR.
    SET WS-REQUEST-INTERCEPTOR TO DYNAMIC-CONSTRUCTOR(WS-SIGV4-REQUEST-INTERCEPTOR-IMPL)
        INITIALIZE WITH WS-PROPERTIES.
    EXIT.

PROCEDURE DIVISION.
BUILD-REQUEST.
    MOVE BASE-URI TO WS-URI.
    MOVE HEADERS TO WS-HEADERS.
    MOVE MAPPER TO WS-MAPPER.
    MOVE METHOD TO WS-METHOD.
    MOVE PATH TO WS-PATH.
    MOVE QUERY-PARAMS TO WS-QUERY-PARAMS.
    MOVE BODY TO WS-BODY.

    SET REQUEST-BUILDER TO IMMUTABLE-HTTP-REQUEST-BUILDER
        SET BASE-URI TO WS-URI
        SET MAPPER TO WS-MAPPER
        SET METHOD TO WS-METHOD
        SET PATH TO WS-PATH
        SET BODY TO WS-BODY
        SET QUERY-PARAMS TO WS-QUERY-PARAMS
        BUILD.

    PERFORM APPLY-BASE-HEADERS.
    PERFORM AUTHENTICATE-REQUEST.

    RETURN REQUEST-BUILDER.

APPLY-BASE-HEADERS.
    MOVE WS-HEADERS TO WS-ALL-HEADERS.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 10
        MOVE WS-HEADER-NAME(I) TO HEADER-NAME
        MOVE WS-HEADER-VALUE(I) TO HEADER-VALUE
        SET HEADER TO HEADER-BUILDER
            SET NAME TO HEADER-NAME
            SET VALUE TO HEADER-VALUE
            BUILD
        ADD HEADER TO WS-ALL-HEADERS
    END-PERFORM.
    EXIT.

AUTHENTICATE-REQUEST.
    MOVE WS-AUTH-SESSION TO AUTH-SESSION.
    PERFORM AUTH-SESSION:AUTHENTICATE(REQUEST-BUILDER).
    RETURN REQUEST-BUILDER.

EXECUTE-REQUEST.
    MOVE REQUEST TO WS-REQUEST.
    MOVE RESPONSE-TYPE TO WS-RESPONSE-TYPE.
    MOVE ERROR-HANDLER TO WS-ERROR-HANDLER.
    MOVE RESPONSE-HEADERS TO WS-RESPONSE-HEADERS.

    SET REQUEST-METHOD TO HTTP-METHOD-ENUM(WS-REQUEST:METHOD()).
    SET REQUEST-URI TO HTTP-URI(WS-REQUEST:REQUEST-URI()).

    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 10
        MOVE WS-HEADER-NAME(I) TO HEADER-NAME
        MOVE WS-HEADER-VALUE(I) TO HEADER-VALUE
        SET HEADER TO HEADER-BUILDER
            SET NAME TO HEADER-NAME
            SET VALUE TO HEADER-VALUE
            BUILD
        ADD HEADER TO REQUEST-METHOD
    END-PERFORM.

    IF WS-REQUEST:ENCODED-BODY() NOT = NULL
        SET ENTITY TO STRING-ENTITY(WS-REQUEST:ENCODED-BODY())
        ADD ENTITY TO REQUEST-METHOD
    END-IF.

    PERFORM WITH TEST AFTER UNTIL RESPONSE-RECEIVED
        PERFORM HTTP-CLIENT:EXECUTE(REQUEST-METHOD)
        MOVE RESPONSE TO WS-RESPONSE
    END-PERFORM.

    PERFORM EXTRACT-RESPONSE-HEADERS.

    IF IS-SUCCESSFUL(WS-RESPONSE)
        IF WS-RESPONSE:CODE() = HTTP-NO-CONTENT
            MOVE NULL TO WS-RESPONSE-BODY
        ELSE
            PERFORM EXTRACT-RESPONSE-BODY
        END-IF
    ELSE
        PERFORM HANDLE-ERROR-RESPONSE
    END-IF.

    IF WS-RESPONSE-BODY = NULL
        PERFORM RAISE-INVALID-RESPONSE-EXCEPTION
    ELSE
        PERFORM PARSE-RESPONSE-BODY
    END-IF.

    RETURN WS-RESPONSE-INSTANCE.

EXTRACT-RESPONSE-HEADERS.
    INITIALIZE WS-RESPONSE-HEADERS.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 10
        MOVE RESPONSE:HEADER(I, NAME) TO WS-HEADER-NAME(I)
        MOVE RESPONSE:HEADER(I, VALUE) TO WS-HEADER-VALUE(I)
        MOVE WS-HEADER-NAME(I) TO HEADER-NAME
        MOVE WS-HEADER-VALUE(I) TO HEADER-VALUE
        PERFORM WS-RESPONSE-HEADERS:PUT(HEADER-NAME, HEADER-VALUE)
    END-PERFORM.
    EXIT.

EXTRACT-RESPONSE-BODY.
    MOVE RESPONSE:ENTITY-STRING() TO WS-RESPONSE-BODY.
    EXIT.

HANDLE-ERROR-RESPONSE.
    MOVE RESPONSE:CODE() TO WS-RESPONSE-CODE.
    MOVE RESPONSE:REASON-PHRASE() TO WS-RESPONSE-REASON.
    IF WS-RESPONSE-BODY NOT = NULL
        PERFORM WS-ERROR-HANDLER(BUILD-ERROR-RESPONSE)
    ELSE
        PERFORM BUILD-DEFAULT-ERROR-RESPONSE
        PERFORM WS-ERROR-HANDLER(WS-ERROR-RESPONSE)
    END-IF.
    PERFORM RAISE-REST-EXCEPTION.
    EXIT.

BUILD-ERROR-RESPONSE.
    PERFORM TRY
        IF WS-ERROR-HANDLER IS TYPE ERROR-HANDLER
            MOVE RESPONSE:CODE() TO WS-ERROR-RESPONSE:RESPONSE-CODE
            MOVE WS-RESPONSE-BODY TO WS-ERROR-RESPONSE:MESSAGE
            MOVE "RESTException" TO WS-ERROR-RESPONSE:TYPE
        ELSE
            MOVE RESPONSE:CODE() TO WS-ERROR-RESPONSE:RESPONSE-CODE
            MOVE WS-RESPONSE-BODY TO WS-ERROR-RESPONSE:MESSAGE
            MOVE NULL TO WS-ERROR-RESPONSE:TYPE
        END-IF
    PERFORM ON EXCEPTION
        MOVE RESPONSE:CODE() TO WS-ERROR-RESPONSE:RESPONSE-CODE
        MOVE WS-RESPONSE-REASON TO WS-ERROR-RESPONSE:MESSAGE
        MOVE "RESTException" TO WS-ERROR-RESPONSE:TYPE
    END-TRY.
    RETURN WS-ERROR-RESPONSE.

BUILD-DEFAULT-ERROR-RESPONSE.
    IF WS-RESPONSE-REASON NOT = NULL AND WS-RESPONSE-REASON NOT = SPACES
        MOVE WS-RESPONSE-REASON TO WS-ERROR-RESPONSE:MESSAGE
    ELSE
        MOVE HTTP-REASON-PHRASE(RESPONSE:CODE(), NULL) TO WS-ERROR-RESPONSE:MESSAGE
    END-IF.
    MOVE "RESTException" TO WS-ERROR-RESPONSE:TYPE.
    MOVE RESPONSE:CODE() TO WS-ERROR-RESPONSE:RESPONSE-CODE.
    RETURN WS-ERROR-RESPONSE.

RAISE-REST-EXCEPTION.
    RAISE REST-EXCEPTION WITH MESSAGE "Unhandled error: %s" USING WS-ERROR-RESPONSE.
    EXIT.

RAISE-INVALID-RESPONSE-EXCEPTION.
    RAISE REST-EXCEPTION WITH MESSAGE 
        "Invalid (null) response body for request (expected %s): method=%s, path=%s, status=%d"
        USING WS-RESPONSE-TYPE, REQUEST:METHOD(), REQUEST:PATH(), RESPONSE:CODE().
    EXIT.

PARSE-RESPONSE-BODY.
    MOVE MAPPER:READ-VALUE(WS-RESPONSE-BODY, WS-RESPONSE-TYPE) TO WS-RESPONSE-INSTANCE.
    RETURN WS-RESPONSE-INSTANCE.

IS-SUCCESSFUL.
    EVALUATE RESPONSE:CODE()
        WHEN HTTP-OK ALSO HTTP-ACCEPTED ALSO HTTP-NO-CONTENT
            RETURN TRUE
        WHEN OTHER
            RETURN FALSE
    END-EVALUATE.

CLOSE.
    IF WS-AUTH-SESSION NOT = NULL
        PERFORM WS-AUTH-SESSION:CLOSE
    END-IF.
    PERFORM HTTP-CLIENT:CLOSE(CLOSE-MODE-GRACEFUL).
    EXIT.

END PROGRAM HTTP-CLIENT.