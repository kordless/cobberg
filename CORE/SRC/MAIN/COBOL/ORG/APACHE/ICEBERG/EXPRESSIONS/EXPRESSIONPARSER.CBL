IDENTIFICATION DIVISION.
PROGRAM-ID. EXPRESSIONPARSER.

ENVIRONMENT DIVISION.
SPECIAL-NAMES.
    LOCALE IS US-EN.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 TYPE-CONST PIC X(6) VALUE "type".
01 VALUE-CONST PIC X(5) VALUE "value".
01 VALUES-CONST PIC X(6) VALUE "values".
01 TRANSFORM-CONST PIC X(9) VALUE "transform".
01 TERM-CONST PIC X(4) VALUE "term".
01 LEFT-CONST PIC X(4) VALUE "left".
01 RIGHT-CONST PIC X(5) VALUE "right".
01 CHILD-CONST PIC X(5) VALUE "child".
01 REFERENCE-CONST PIC X(9) VALUE "reference".
01 LITERAL-CONST PIC X(7) VALUE "literal".

01 JSON-GENERATOR.
    05 BUFFER PIC X(1024) VALUE SPACES.
    05 BUFFER-POINTER PIC 9(4) COMP-5 VALUE 0.

PROCEDURE DIVISION.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. TOJSON.
    PROCEDURE DIVISION USING EXPRESSION, PRETTY-FLAG.
        CALL "JSONUTIL" USING EXPRESSION, PRETTY-FLAG, JSON-GENERATOR.
        MOVE BUFFER TO RETURN-CODE.
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. FROMJSON.
    PROCEDURE DIVISION USING JSON-DATA, SCHEMA.
        CALL "JSONUTIL" USING JSON-DATA, SCHEMA, EXPRESSION.
        MOVE EXPRESSION TO RETURN-CODE.
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. JSONGENERATORVISITOR.
    PROCEDURE DIVISION.
        PERFORM ALWAYSTRUE.
        PERFORM ALWAYSFALSE.
        PERFORM NOT USING CHILD.
        PERFORM AND USING LEFT, RIGHT.
        PERFORM OR USING LEFT, RIGHT.
        PERFORM PREDICATE USING PRED.
        PERFORM UNBOUNDPREDICATE USING PRED.
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. OPERATIONTYPE.
        MOVE PRED-OP TO OPERATION-CODE.
        STRING OPERATION-CODE DELIMITED BY "_" INTO OPERATION-STRING.
        TRANSFORM OPERATION-STRING TO LOWER-CASE.
        MOVE OPERATION-STRING TO RETURN-CODE.
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. TERM.
        IF TERM IS UNBOUNDTRANSFORM
            PERFORM TRANSFORM USING TRANSFORM-NAME, TERM-NAME
        ELSE IF TERM IS BOUNDTRANSFORM
            PERFORM TRANSFORM USING TRANSFORM-NAME, TERM-NAME
        ELSE IF TERM IS REFERENCE
            MOVE TERM-NAME TO RETURN-CODE
        ELSE
            RAISE EXCEPTION "UNSUPPORTED_TERM".
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. TRANSFORM.
        WRITE JSON-GENERATOR
            TYPE-CONST ":" TRANSFORM-CONST ","
            TRANSFORM-CONST ":" TRANSFORM-NAME ","
            TERM-CONST ":" TERM-NAME.
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. PREDICATEFROMJSON.
        PERFORM TERM USING TERM-NODE.
        PERFORM CASE-OPERATION
            WHEN IS-NULL THRU NOT-NAN
                PERFORM UNARY-PREDICATE
            WHEN LT THRU NOT-STARTS-WITH
                PERFORM LITERAL-PREDICATE USING VALUE-NODE
            WHEN IN THRU NOT-IN
                PERFORM LITERAL-SET-PREDICATE USING VALUES-NODE
            WHEN OTHER
                RAISE EXCEPTION "UNSUPPORTED_OPERATION".
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. UNARY-PREDICATE.
        WRITE JSON-GENERATOR
            TYPE-CONST ":" OPERATION-STRING ","
            TERM-CONST ":" TERM-NAME.
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. LITERAL-PREDICATE.
        WRITE JSON-GENERATOR
            TYPE-CONST ":" OPERATION-STRING ","
            TERM-CONST ":" TERM-NAME ","
            VALUE-CONST ":" VALUE-DATA.
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. LITERAL-SET-PREDICATE.
        WRITE JSON-GENERATOR
            TYPE-CONST ":" OPERATION-STRING ","
            TERM-CONST ":" TERM-NAME ","
            VALUES-CONST ":[".
        PERFORM VARYING I FROM 1 BY 1 UNTIL I > VALUES-COUNT
            WRITE JSON-GENERATOR VALUE-DATA(I)
            IF I < VALUES-COUNT THEN WRITE JSON-GENERATOR ",".
        END-PERFORM.
        WRITE JSON-GENERATOR "]".
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. ASVALUE.
        IF JSONNODE IS INTEGRAL-NUMBER AND JSONNODE CAN-CONVERT-TO-LONG
            MOVE JSONNODE-LONG TO RETURN-CODE
        ELSE IF JSONNODE IS TEXTUAL
            MOVE JSONNODE-STRING TO RETURN-CODE
        ELSE IF JSONNODE IS FLOATING-POINT
            MOVE JSONNODE-DOUBLE TO RETURN-CODE
        ELSE IF JSONNODE IS BOOLEAN
            MOVE JSONNODE-BOOLEAN TO RETURN-CODE
        ELSE
            RAISE EXCEPTION "INVALID_LITERAL".
    EXIT PROGRAM.

    IDENTIFICATION DIVISION.
    PROGRAM-ID. TERM-FROM-JSON.
        IF JSONNODE IS TEXTUAL
            MOVE JSONNODE-STRING TO TERM-NAME
            RETURN REFERENCE-TERM
        ELSE IF JSONNODE IS OBJECT
            EVALUATE JSONNODE-TYPE
                WHEN REFERENCE-CONST
                    MOVE JSONNODE-TERM TO TERM-NAME
                    RETURN REFERENCE-TERM
                WHEN TRANSFORM-CONST
                    PERFORM TERM-FROM-JSON USING JSONNODE-TERM
                    MOVE TERM-NAME TO CHILD-TERM-NAME
                    MOVE JSONNODE-TRANSFORM TO TRANSFORM-NAME
                    RETURN TRANSFORM-TERM
                WHEN OTHER
                    RAISE EXCEPTION "INVALID_TERM"
            END-EVALUATE
        ELSE
            RAISE EXCEPTION "INVALID_TERM".
    EXIT PROGRAM.

END PROGRAM EXPRESSIONPARSER.