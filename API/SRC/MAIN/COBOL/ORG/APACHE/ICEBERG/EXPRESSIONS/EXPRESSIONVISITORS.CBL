IDENTIFICATION DIVISION.
PROGRAM-ID. EXPRESSION-VISITORS.

ENVIRONMENT DIVISION.
REPOSITORY.
    COPY "ICEBERG-EXPRESSIONS.cpy".

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-VISITOR-RESULT          PIC X(1) VALUE SPACE.

PROCEDURE DIVISION.

    DEFINE-METHOD 'ALWAYSTRUE' OF EXP-VISITOR.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'ALWAYSFALSE' OF EXP-VISITOR.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'NOT' OF EXP-VISITOR USING R-RESULT.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'AND' OF EXP-VISITOR USING L-RESULT R-RESULT.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'OR' OF EXP-VISITOR USING L-RESULT R-RESULT.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'PREDICATE' OF EXP-VISITOR USING PRED.
        IF PRED IS INSTANCE OF BOUND-PREDICATE
            PERFORM PROCESS-BOUND-PREDICATE USING PRED
        ELSE
            PERFORM PROCESS-UNBOUND-PREDICATE USING PRED
        END-IF.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'AGGREGATE' OF EXP-VISITOR USING AGG.
        IF AGG IS INSTANCE OF BOUND-AGGREGATE
            PERFORM PROCESS-BOUND-AGGREGATE USING AGG
        ELSE
            PERFORM PROCESS-UNBOUND-AGGREGATE USING AGG
        END-IF.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    PROCESS-BOUND-PREDICATE.
        EVALUATE BOUND-PREDICATE-OP(PRED)
            WHEN 'LT'
                PERFORM LT USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'LT_EQ'
                PERFORM LTEQ USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'GT'
                PERFORM GT USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'GT_EQ'
                PERFORM GTEQ USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'EQ'
                PERFORM EQ USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'NOT_EQ'
                PERFORM NOTEQ USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'STARTS_WITH'
                PERFORM STARTSWITH USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'NOT_STARTS_WITH'
                PERFORM NOTSTARTSWITH USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'IS_NULL'
                PERFORM ISNULL USING BOUND-PREDICATE-TERM(PRED)
            WHEN 'NOT_NULL'
                PERFORM NOTNULL USING BOUND-PREDICATE-TERM(PRED)
            WHEN 'IS_NAN'
                PERFORM ISNAN USING BOUND-PREDICATE-TERM(PRED)
            WHEN 'NOT_NAN'
                PERFORM NOTNAN USING BOUND-PREDICATE-TERM(PRED)
            WHEN 'IN'
                PERFORM IN USING BOUND-PREDICATE-TERM(PRED) BOUND-SET-PREDICATE-LITERAL-SET(PRED)
            WHEN 'NOT_IN'
                PERFORM NOTIN USING BOUND-PREDICATE-TERM(PRED) BOUND-SET-PREDICATE-LITERAL-SET(PRED)
            WHEN OTHER
                RAISE EXCEPTION "INVALID OPERATION FOR BOUND-PREDICATE: " BOUND-PREDICATE-OP(PRED)
        END-EVALUATE.

    PROCESS-UNBOUND-PREDICATE.
        RAISE EXCEPTION "NOT A BOUND PREDICATE: " UNBOUND-PREDICATE-CLASS(PRED).

    PROCESS-BOUND-AGGREGATE.
        RAISE EXCEPTION "CANNOT VISIT AGGREGATE EXPRESSION".

    PROCESS-UNBOUND-AGGREGATE.
        RAISE EXCEPTION "CANNOT VISIT AGGREGATE EXPRESSION".

    LT.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    LTEQ.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    GT.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    GTEQ.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    EQ.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    NOTEQ.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    ISNULL.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    NOTNULL.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    ISNAN.
        RAISE EXCEPTION "ISNAN IS NOT IMPLEMENTED".

    NOTNAN.
        RAISE EXCEPTION "NOTNAN IS NOT IMPLEMENTED".

    IN.
        RAISE EXCEPTION "IN OPERATION IS NOT SUPPORTED".

    NOTIN.
        RAISE EXCEPTION "NOTIN OPERATION IS NOT SUPPORTED".

    STARTSWITH.
        RAISE EXCEPTION "STARTSWITH OPERATION IS NOT SUPPORTED".

    NOTSTARTSWITH.
        RAISE EXCEPTION "NOTSTARTSWITH OPERATION IS NOT SUPPORTED".

    HANDLE-NON-REFERENCE.
        RAISE EXCEPTION "VISITOR DOES NOT SUPPORT NON-REFERENCE: " BOUND-CLASS(TERM).

    VISIT-EXPRESSION USING EXPR VISITOR.
        IF EXPR IS INSTANCE OF PREDICATE
            IF EXPR IS INSTANCE OF BOUND-PREDICATE
                PERFORM PREDICATE USING EXPR VISITOR
            ELSE
                PERFORM PREDICATE USING EXPR VISITOR
            END-IF
        ELSE IF EXPR IS INSTANCE OF AGGREGATE
            IF EXPR IS INSTANCE OF BOUND-AGGREGATE
                PERFORM AGGREGATE USING EXPR VISITOR
            ELSE
                PERFORM AGGREGATE USING EXPR VISITOR
            END-IF
        ELSE
            EVALUATE EXPR-OP(EXPR)
                WHEN 'TRUE'
                    PERFORM ALWAYSTRUE USING VISITOR
                WHEN 'FALSE'
                    PERFORM ALWAYSFALSE USING VISITOR
                WHEN 'NOT'
                    PERFORM NOT USING VISITOR (VISIT-EXPR(NOT-CHILD(EXPR) VISITOR))
                WHEN 'AND'
                    PERFORM AND USING VISITOR (VISIT-EXPR(AND-LEFT(EXPR) VISITOR)) (VISIT-EXPR(AND-RIGHT(EXPR) VISITOR))
                WHEN 'OR'
                    PERFORM OR USING VISITOR (VISIT-EXPR(OR-LEFT(EXPR) VISITOR)) (VISIT-EXPR(OR-RIGHT(EXPR) VISITOR))
                WHEN OTHER
                    RAISE EXCEPTION "UNKNOWN OPERATION: " EXPR-OP(EXPR)
            END-EVALUATE
        END-IF.

    VISIT-EXPR USING EXPR VISITOR.
        IF EXPR IS INSTANCE OF PREDICATE
            IF EXPR IS INSTANCE OF BOUND-PREDICATE
                RETURN PROCEDURE-POINTER TO PROCESS-BOUND-PREDICATE USING EXPR
            ELSE
                RETURN PROCEDURE-POINTER TO PROCESS-UNBOUND-PREDICATE USING EXPR
            END-IF
        ELSE
            EVALUATE EXPR-OP(EXPR)
                WHEN 'TRUE'
                    RETURN PROCEDURE-POINTER TO ALWAYSTRUE USING VISITOR
                WHEN 'FALSE'
                    RETURN PROCEDURE-POINTER TO ALWAYSFALSE USING VISITOR
                WHEN 'NOT'
                    RETURN PROCEDURE-POINTER TO NOT USING VISITOR (VISIT-EXPR(NOT-CHILD(EXPR) VISITOR))
                WHEN 'AND'
                    RETURN PROCEDURE-POINTER TO AND USING VISITOR (VISIT-EXPR(AND-LEFT(EXPR) VISITOR)) (VISIT-EXPR(AND-RIGHT(EXPR) VISITOR))
                WHEN 'OR'
                    RETURN PROCEDURE-POINTER TO OR USING VISITOR (VISIT-EXPR(OR-LEFT(EXPR) VISITOR)) (VISIT-EXPR(OR-RIGHT(EXPR) VISITOR))
                WHEN OTHER
                    RAISE EXCEPTION "UNKNOWN OPERATION: " EXPR-OP(EXPR)
            END-EVALUATE
        END-IF.

    VISIT-EVALUATOR USING EXPR VISITOR.
        IF EXPR IS INSTANCE OF PREDICATE
            IF EXPR IS INSTANCE OF BOUND-PREDICATE
                RETURN VISIT-EXPRESSION USING EXPR VISITOR
            ELSE
                RETURN VISIT-EXPRESSION USING EXPR VISITOR
            END-IF
        ELSE
            EVALUATE EXPR-OP(EXPR)
                WHEN 'TRUE'
                    RETURN ALWAYSTRUE USING VISITOR
                WHEN 'FALSE'
                    RETURN ALWAYSFALSE USING VISITOR
                WHEN 'NOT'
                    RETURN NOT USING VISITOR (VISIT-EVALUATOR(NOT-CHILD(EXPR) VISITOR))
                WHEN 'AND'
                    PERFORM VISIT-EVALUATOR USING AND-LEFT(EXPR) VISITOR
                    IF WS-VISITOR-RESULT = 'F'
                        RETURN ALWAYSFALSE USING VISITOR
                    END-IF
                    RETURN AND USING VISITOR SPACE (VISIT-EVALUATOR(AND-RIGHT(EXPR) VISITOR))
                WHEN 'OR'
                    PERFORM VISIT-EVALUATOR USING OR-LEFT(EXPR) VISITOR
                    IF WS-VISITOR-RESULT = 'T'
                        RETURN ALWAYSTRUE USING VISITOR
                    END-IF
                    RETURN OR USING VISITOR SPACE (VISIT-EVALUATOR(OR-RIGHT(EXPR) VISITOR))
                WHEN OTHER
                    RAISE EXCEPTION "UNKNOWN OPERATION: " EXPR-OP(EXPR)
            END-EVALUATE
        END-IF.

    DEFINE-METHOD 'ALWAYSTRUE' OF CUSTOM-ORDER-VISITOR.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'ALWAYSFALSE' OF CUSTOM-ORDER-VISITOR.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'NOT' OF CUSTOM-ORDER-VISITOR USING R-RESULT.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'AND' OF CUSTOM-ORDER-VISITOR USING L-RESULT R-RESULT.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'OR' OF CUSTOM-ORDER-VISITOR USING L-RESULT R-RESULT.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    DEFINE-METHOD 'PREDICATE' OF CUSTOM-ORDER-VISITOR USING PRED.
        IF PRED IS INSTANCE OF BOUND-PREDICATE
            PERFORM PROCESS-CUSTOM-ORDER-BOUND-PREDICATE USING PRED
        ELSE
            RAISE EXCEPTION "NOT A BOUND PREDICATE: " UNBOUND-PREDICATE-CLASS(PRED)
        END-IF.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    PROCESS-CUSTOM-ORDER-BOUND-PREDICATE.
        EVALUATE BOUND-PREDICATE-OP(PRED)
            WHEN 'LT'
                PERFORM LT USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'LT_EQ'
                PERFORM LTEQ USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'GT'
                PERFORM GT USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'GT_EQ'
                PERFORM GTEQ USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'EQ'
                PERFORM EQ USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'NOT_EQ'
                PERFORM NOTEQ USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'STARTS_WITH'
                PERFORM STARTSWITH USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'NOT_STARTS_WITH'
                PERFORM NOTSTARTSWITH USING BOUND-PREDICATE-TERM(PRED) BOUND-LITERAL-PREDICATE-LITERAL(PRED)
            WHEN 'IS_NULL'
                PERFORM ISNULL USING BOUND-PREDICATE-TERM(PRED)
            WHEN 'NOT_NULL'
                PERFORM NOTNULL USING BOUND-PREDICATE-TERM(PRED)
            WHEN 'IS_NAN'
                PERFORM ISNAN USING BOUND-PREDICATE-TERM(PRED)
            WHEN 'NOT_NAN'
                PERFORM NOTNAN USING BOUND-PREDICATE-TERM(PRED)
            WHEN 'IN'
                PERFORM IN USING BOUND-PREDICATE-TERM(PRED) BOUND-SET-PREDICATE-LITERAL-SET(PRED)
            WHEN 'NOT_IN'
                PERFORM NOTIN USING BOUND-PREDICATE-TERM(PRED) BOUND-SET-PREDICATE-LITERAL-SET(PRED)
            WHEN OTHER
                RAISE EXCEPTION "INVALID OPERATION FOR BOUND-PREDICATE: " BOUND-PREDICATE-OP(PRED)
        END-EVALUATE.

    LT.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    LTEQ.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    GT.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    GTEQ.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    EQ.
        MOVE SPACE TO WS-VISITOR-RESULT.
        GOBACK.

    NOTEQ.
        MOVE SPACE TO WS-VISITOR-RESULT.