IDENTIFICATION DIVISION.
PROGRAM-ID. EXPRESSION-UTIL.

ENVIRONMENT DIVISION.
REPOSITORY.
    FUNCTION HASH-FUNC IS EXTERNAL.
    FUNCTION TRANSFORMS-BUCKET IS EXTERNAL.
    FUNCTION TYPES-STRING-TYPE-GET IS EXTERNAL.
    FUNCTION DATETIME-UTIL-NANOS-TO-MICROS IS EXTERNAL.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 EPOCH PIC X(26) VALUE '1970-01-01T00:00:00.000Z'.
01 FIVE-MINUTES-IN-MICROS PIC 9(18) COMP VALUE 300000000.
01 THREE-DAYS-IN-HOURS PIC 9(10) COMP VALUE 72.
01 NINETY-DAYS-IN-HOURS PIC 9(10) COMP VALUE 2160.
01 DATE-PATTERN PIC X(12) VALUE '\\d{4}-\\d{2}-\\d{2}'.
01 TIME-PATTERN PIC X(16) VALUE '\\d{2}:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?'.
01 TIMESTAMP-PATTERN PIC X(27) VALUE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?'.
01 TIMESTAMPTZ-PATTERN PIC X(38) VALUE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?([-+]\\d{2}:\\d{2}|Z)'.
01 TIMESTAMPNS-PATTERN PIC X(27) VALUE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{7,9})?)?'.
01 TIMESTAMPTZNS-PATTERN PIC X(38) VALUE '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{7,9})?)?([-+]\\d{2}:\\d{2}|Z)'.
01 LONG-IN-PREDICATE-ABBREVIATION-THRESHOLD PIC 9(10) COMP VALUE 10.
01 LONG-IN-PREDICATE-ABBREVIATION-MIN-GAIN PIC 9(10) COMP VALUE 5.

PROCEDURE DIVISION.
SANITIZE-EXPRESSION.
    CALL "EXPRESSION-VISITORS-VISIT" USING EXPRESSION, NEW EXPRESSION-SANITIZER.
    RETURN RESULT.

SANITIZE-EXPRESSION-WITH-STRUCT.
    PERFORM BIND-EXPRESSION.
    CALL "EXPRESSION-VISITORS-VISIT" USING BOUND-EXPRESSION, NEW EXPRESSION-SANITIZER.
    RETURN RESULT.

BIND-EXPRESSION.
    PERFORM BINDER-BIND USING STRUCT, EXPRESSION, CASE-SENSITIVE.
    MOVE RESULT TO BOUND-EXPRESSION.
    EXCEPTION
        CALL "EXPRESSION-VISITORS-VISIT" USING EXPRESSION, NEW EXPRESSION-SANITIZER.
        MOVE RESULT TO BOUND-EXPRESSION.

TO-SANITIZED-STRING.
    CALL "EXPRESSION-VISITORS-VISIT" USING EXPRESSION, NEW STRING-SANITIZER.
    RETURN RESULT.

TO-SANITIZED-STRING-WITH-STRUCT.
    PERFORM BIND-EXPRESSION.
    CALL "EXPRESSION-VISITORS-VISIT" USING BOUND-EXPRESSION, NEW STRING-SANITIZER.
    RETURN RESULT.

EXTRACT-BY-ID-INCLUSIVE.
    PERFORM IDENTITY-SPEC USING SCHEMA, IDS.
    CALL "PROJECTIONS-INCLUSIVE" USING SPEC, CASE-SENSITIVE, EXPRESSION.
    CALL "EXPRESSIONS-REWRITE-NOT" USING EXPRESSION.
    RETURN RESULT.

IDENTITY-SPEC.
    PERFORM BUILD-PARTITION-SPEC-BUILDER USING SCHEMA.
    PERFORM ADD-IDENTITY-FIELDS VARYING ID FROM 1 BY 1 UNTIL ID > COUNT OF IDS.
    MOVE RESULT TO SPEC.

BUILD-PARTITION-SPEC-BUILDER.
    CALL "PARTITION-SPEC-BUILDER-FOR" USING SCHEMA.
    MOVE RESULT TO SPEC-BUILDER.

ADD-IDENTITY-FIELDS.
    CALL "SCHEMA-FIND-COLUMN-NAME" USING SCHEMA, ID.
    CALL "PARTITION-SPEC-BUILDER-IDENTITY" USING SPEC-BUILDER, RESULT.

EQUIVALENT.
    PERFORM BINDER-BIND USING STRUCT, EXPRESSIONS-REWRITE-NOT(LEFT), CASE-SENSITIVE.
    MOVE RESULT TO LEFT-BOUND.
    PERFORM BINDER-BIND USING STRUCT, EXPRESSIONS-REWRITE-NOT(RIGHT), CASE-SENSITIVE.
    MOVE RESULT TO RIGHT-BOUND.
    CALL "EXPRESSIONS-IS-EQUIVALENT-TO" USING LEFT-BOUND, RIGHT-BOUND.
    RETURN RESULT.

SELECTS-PARTITIONS.
    PERFORM CHECK-PARTITIONS VARYING SPEC FROM 1 BY 1 UNTIL SPEC > COUNT OF TABLE-SPECS.
    RETURN RESULT.

CHECK-PARTITIONS.
    CALL "SELECTSPARTITIONS" USING EXPRESSION, TABLE-SPECS(SPEC), CASE-SENSITIVE.
    IF RESULT IS FALSE
        MOVE FALSE TO RESULT
        EXIT PARAGRAPH.

DESCRIBE.
    IF TERM IS UNBOUND-TRANSFORM
        MOVE TRANSFORM OF TERM TO T1
        MOVE REF OF TERM TO T2
        STRING T1, '(', DESCRIBE(T2), ')' INTO RESULT
    ELSE IF TERM IS BOUND-TRANSFORM
        MOVE TRANSFORM OF TERM TO T1
        MOVE REF OF TERM TO T2
        STRING T1, '(', DESCRIBE(T2), ')' INTO RESULT
    ELSE IF TERM IS NAMED-REFERENCE
        MOVE NAME OF TERM TO RESULT
    ELSE IF TERM IS BOUND-REFERENCE
        MOVE NAME OF TERM TO RESULT
    ELSE
        RAISE UNSUPPORTED-OPERATION-EXCEPTION.

UNBIND-BOUND-TERM.
    IF TERM IS BOUND-TRANSFORM
        MOVE REF OF TERM TO T1
        MOVE TRANSFORM OF TERM TO T2
        CALL "EXPRESSIONS-TRANSFORM" USING T1-NAME, T2 INTO RESULT
    ELSE IF TERM IS BOUND-REFERENCE
        CALL "EXPRESSIONS-REF" USING NAME OF TERM INTO RESULT
    ELSE
        RAISE UNSUPPORTED-OPERATION-EXCEPTION.

UNBIND-TERM.
    IF TERM IS UNBOUND-TERM
        MOVE TERM TO RESULT
    ELSE IF TERM IS BOUND-TERM
        CALL "UNBIND-BOUND-TERM" USING TERM INTO RESULT
    ELSE
        RAISE UNSUPPORTED-OPERATION-EXCEPTION.

EXPRESSION-SANITIZER SECTION.
    MOVE SYSTEM-CLOCK TO NOW-MICROS.
    MOVE NUMBER-OF-DAYS-SINCE-EPOCH(NOW-MICROS) TO TODAY.

    SANITIZE-ALWAYS-TRUE.
        RETURN EXPRESSIONS-ALWAYS-TRUE.

    SANITIZE-ALWAYS-FALSE.
        RETURN EXPRESSIONS-ALWAYS-FALSE.

    SANITIZE-NOT.
        CALL "EXPRESSIONS-NOT" USING RESULT INTO RESULT.
        RETURN RESULT.

    SANITIZE-AND.
        CALL "EXPRESSIONS-AND" USING LEFT-RESULT, RIGHT-RESULT INTO RESULT.
        RETURN RESULT.

    SANITIZE-OR.
        CALL "EXPRESSIONS-OR" USING LEFT-RESULT, RIGHT-RESULT INTO RESULT.
        RETURN RESULT.

    SANITIZE-PREDICATE.
        IF PREDICATE IS UNARY-PREDICATE
            CALL "UNBIND-TERM" USING TERM OF PREDICATE INTO TERM.
            RETURN NEW UNBOUND-PREDICATE(OPERATION OF PREDICATE, TERM).
        ELSE IF PREDICATE IS LITERAL-PREDICATE
            MOVE TERM OF PREDICATE TO T1
            MOVE LITERAL OF PREDICATE TO T2
            CALL "SANITIZE" USING TYPE OF T1, T2, NOW-MICROS, TODAY INTO T3.
            RETURN NEW UNBOUND-PREDICATE(OPERATION OF PREDICATE, UNBIND-TERM(T1), T3).
        ELSE IF PREDICATE IS SET-PREDICATE
            MOVE TERM OF PREDICATE TO T1
            MOVE LITERAL-SET OF PREDICATE TO T2
            PERFORM SANITIZE-SET-ELEMENTS USING T2 INTO T3.
            RETURN NEW UNBOUND-PREDICATE(OPERATION OF PREDICATE, UNBIND-TERM(T1), T3).
        ELSE
            RAISE UNSUPPORTED-OPERATION-EXCEPTION.

    SANITIZE-SET-ELEMENTS.
        MOVE ENTRIES OF T2 TO WS-TABLE.
        PERFORM VARYING ELEMENT FROM 1 BY 1 UNTIL ELEMENT > COUNT OF WS-TABLE
            CALL "SANITIZE" USING TYPE OF T1, WS-TABLE(ELEMENT), NOW-MICROS, TODAY INTO WS-TABLE(ELEMENT)
        END-PERFORM.
        MOVE WS-TABLE TO RESULT.

STRING-SANITIZER SECTION.
    MOVE SYSTEM-CLOCK TO NOW-MICROS.
    MOVE NUMBER-OF-DAYS-SINCE-EPOCH(NOW-MICROS) TO TODAY.

    SANITIZE-ALWAYS-TRUE.
        RETURN 'true'.

    SANITIZE-ALWAYS-FALSE.
        RETURN 'false'.

    SANITIZE-NOT.
        STRING 'NOT (', RESULT, ')' INTO RESULT.
        RETURN RESULT.

    SANITIZE-AND.
        STRING '(', LEFT-RESULT, ' AND ', RIGHT-RESULT, ')' INTO RESULT.
        RETURN RESULT.

    SANITIZE-OR.
        STRING '(', LEFT-RESULT, ' OR ', RIGHT-RESULT, ')' INTO RESULT.
        RETURN RESULT.

    SANITIZE-PREDICATE.
        MOVE DESCRIBE(TERM OF PREDICATE) TO TERM-STR.
        EVALUATE OPERATION OF PREDICATE
            WHEN IS-NULL
                STRING TERM-STR, ' IS NULL' INTO RESULT
            WHEN NOT-NULL
                STRING TERM-STR, ' IS NOT NULL' INTO RESULT
            WHEN IS-NAN
                STRING 'is_nan(', TERM-STR, ')' INTO RESULT
            WHEN NOT-NAN
                STRING 'not_nan(', TERM-STR, ')' INTO RESULT
            WHEN LT
                STRING TERM-STR, ' < ', SANITIZE-VALUE(PREDICATE) INTO RESULT
            WHEN LT-EQ
                STRING TERM-STR, ' <= ', SANITIZE-VALUE(PREDICATE) INTO RESULT
            WHEN GT
                STRING TERM-STR, ' > ', SANITIZE-VALUE(PREDICATE) INTO RESULT
            WHEN GT-EQ
                STRING TERM-STR, ' >= ', SANITIZE-VALUE(PREDICATE) INTO RESULT
            WHEN EQ
                STRING TERM-STR, ' = ', SANITIZE-VALUE(PREDICATE) INTO RESULT
            WHEN NOT-EQ
                STRING TERM-STR, ' != ', SANITIZE-VALUE(PREDICATE) INTO RESULT
            WHEN IN
                PERFORM SANITIZE-IN-PREDICATE USING PREDICATE INTO RESULT
            WHEN NOT-IN
                PERFORM SANITIZE-NOT-IN-PREDICATE USING PREDICATE INTO RESULT
            WHEN STARTS-WITH
                STRING TERM-STR, ' STARTS WITH ', SANITIZE-VALUE(PREDICATE) INTO RESULT
            WHEN NOT-STARTS-WITH
                STRING TERM-STR, ' NOT STARTS WITH ', SANITIZE-VALUE(PREDICATE) INTO RESULT
            WHEN OTHER
                RAISE UNSUPPORTED-OPERATION-EXCEPTION
        END-EVALUATE.
        RETURN RESULT.

    SANITIZE-IN-PREDICATE.
        MOVE DESCRIBE(TERM OF PREDICATE) TO TERM-STR.
        PERFORM SANITIZE-VALUES USING LITERAL-SET OF PREDICATE INTO VALUE-LIST.
        STRING TERM-STR, ' IN ', '(', VALUE-LIST, ')' INTO RESULT.
        RETURN RESULT.

    SANITIZE-NOT-IN-PREDICATE.
        MOVE DESCRIBE(TERM OF PREDICATE) TO TERM-STR.
        PERFORM SANITIZE-VALUES USING LITERAL-SET OF PREDICATE INTO VALUE-LIST.
        STRING TERM-STR, ' NOT IN ', '(', VALUE-LIST, ')' INTO RESULT.
        RETURN RESULT.

    SANITIZE-VALUES.
        MOVE ENTRIES OF T1 TO WS-TABLE.
        PERFORM VARYING ELEMENT FROM 1 BY 1 UNTIL ELEMENT > COUNT OF WS-TABLE
            CALL "SANITIZE" USING LITERAL(ELEMENT), NOW-MICROS, TODAY INTO WS-TABLE(ELEMENT)
        END-PERFORM.
        PERFORM ABBREVIATE-VALUES USING WS-TABLE INTO VALUE-LIST.

    ABBREVIATE-VALUES.
        IF COUNT OF T1 >= LONG-IN-PREDICATE-ABBREVIATION-THRESHOLD
            PERFORM COLLECT-DISTINCT-VALUES USING T1 INTO DISTINCT-VALUES
            IF COUNT OF DISTINCT-VALUES <= COUNT OF T1 - LONG-IN-PREDICATE-ABBREVIATION-MIN-GAIN
                MOVE DISTINCT-VALUES TO WS-TABLE
                STRING '... (', COUNT OF T1 - COUNT OF DISTINCT-VALUES, ' values hidden, ', COUNT OF T1, ' in total)' INTO WS-TABLE(COUNT OF WS-TABLE + 1)
                MOVE WS-TABLE TO RESULT
                EXIT PARAGRAPH
            END-IF
        END-IF.
        MOVE T1 TO RESULT.

    COLLECT-DISTINCT-VALUES.
        MOVE FUNCTION INITIALIZE-TABLE() TO DISTINCT-VALUES.
        PERFORM VARYING ELEMENT FROM 1 BY 1 UNTIL ELEMENT > COUNT OF T1
            CALL "HASH-FUNC" USING T1(ELEMENT) INTO HASH
            PERFORM ADD-DISTINCT-VALUE USING HASH
        END-PERFORM.

    ADD-DISTINCT-VALUE.
        PERFORM VARYING ENTRY FROM 1 BY 1 UNTIL ENTRY > COUNT OF DISTINCT-VALUES OR DISTINCT-VALUES(ENTRY) = T1
            CONTINUE
        END-PERFORM.
        IF ENTRY > COUNT OF DISTINCT-VALUES
            MOVE T1 TO DISTINCT-VALUES(ENTRY)
            MOVE ENTRY TO COUNT OF DISTINCT-VALUES
        END-IF.

    SANITIZE-VALUE.
        CALL "SANITIZE" USING TERM-TYPE OF PREDICATE, LITERAL OF PREDICATE, NOW-MICROS, TODAY INTO RESULT.
        RETURN RESULT.

SANITIZE.
    EVALUATE TYPE-ID OF TYPE
        WHEN INTEGER ALSO LONG
            CALL "SANITIZE-NUMBER" USING VALUE, 'int' INTO RESULT
        WHEN FLOAT ALSO DOUBLE
            CALL "SANITIZE-NUMBER" USING VALUE, 'float' INTO RESULT
        WHEN DATE
            CALL "SANITIZE-DATE" USING VALUE, TODAY INTO RESULT
        WHEN TIME
            MOVE '(time)' TO RESULT
        WHEN TIMESTAMP
            CALL "SANITIZE-TIMESTAMP" USING VALUE, NOW-MICROS INTO RESULT
        WHEN TIMESTAMP-NANO
            CALL "DATETIME-UTIL-NANOS-TO-MICROS" USING VALUE INTO MICROS
            CALL "SANITIZE-TIMESTAMP" USING MICROS, NOW-MICROS INTO RESULT
        WHEN STRING
            CALL "SANITIZE-STRING" USING VALUE, NOW-MIC